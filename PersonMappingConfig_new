using EH.Shared.SdocToXpmConverter.Mapping.Tools;
using Mapster;

namespace EH.Shared.SdocToXpmConverter.Mapping.Configs
{
    public class InvertedPersonMappingConfig : IRegister
    {
        public void Register(TypeAdapterConfig config)
        {
            // Mapping config to convert Sdoc to Models.Xpm.Person
            TypeAdapterConfig<Models.Xpm.Person, SdocAdapter.Root>.ForType()
                .Map(dest => dest.MspEsrd, src => MappingHelpers.MapMsp(src))
                .Map(dest => MappingHelpers.MapDiagnoses(src, dest.Diagnoses))
                .Map(dest => MappingHelpers.MapGuarantors(src, dest.Guarantors))
                .Map(dest => MappingHelpers.MapFamilyMembers(src, dest.FamilyMembers))
                .Map(dest => MappingHelpers.MapInsurances(src, dest.Insurances))
                .Map(dest => MappingHelpers.MapNextOfKins(src, dest.NextofKins))
                .Map(dest => src.Patient, src => src.Adapt<SdocAdapter.Root>())
                .Map(dest => src.UserRoles, src => src.Adapt<SdocAdapter.UserRole>())
                .Map(dest => MappingHelpers.MapSpouses(src, dest.Spouses))
                .Map(dest => MappingHelpers.MapBeneficiarys(src, dest.Beneficiarys))
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.UserRole, SdocAdapter.UserRole>.ForType()
                .Map(dest => src.RolePerson_GivenName, src => dest.FirstName)
                .Map(dest => src.RolePerson_MiddleName, src => dest.MiddleName)
                .Map(dest => src.RolePerson_FamilyName, src => dest.LastName)
                .Map(dest => src.RolePerson_IDNumber, src => dest.PersonIdentifier)
                .Map(dest => src.Ordinality, src => dest.RolId)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.MspEsrd, SdocAdapter.MSP>.ForType()
                .Map(dest => src.DialysisBeginDate, src => dest.DialysisBeginDate)
                .Map(dest => src.DualEntitlementStatus, src => dest.DualEntitlementStatus)
                .Map(dest => src.InitialEntitlementStatus, src => dest.InitialEntitlementStatus)
                .Map(dest => src.KidneyTransplantStatus, src => dest.KidneyTransplantStatus)
                .Map(dest => src.MaintenanceDialysisStatus, src => dest.MaintenanceDialysisStatus)
                .Map(dest => src.SelfDialysisTrainingDate, src => dest.SelfDialysisTrainingDate)
                .Map(dest => src.SelfDialysisTrainingStatus, src => dest.SelfDialysisTrainingStatus)
                .Map(dest => src.ThirtyMonthCOBStatus, src => dest.ThirtyMonthCOBStatus)
                .Map(dest => src.TransplantDate, src => dest.TransplantDate)
                .Map(dest => src.WorkingAgedOrDisabilityMSPStatus, src => dest.WorkingAgedOrDisabilityMSPStatus)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.FamilyMember, SdocAdapter.MSP>.ForType()
                .Map(dest => src.FamilyMemberEmployerPhoneNumber, src => dest.FmEmployerPhoneNumber)
                .Map(dest => src.FamilyMemberEmployerAddress_ZipCode, src => dest.FmEmployerAddressZip)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Patient, SdocAdapter.Root>.ForType()
                .Map(dest => new List<Models.Xpm.AccessRestriction>(), src => dest.AccessRestrictions)
                .Map(dest => new List<Models.Xpm.Allergy>(), src => dest.Allergies)
                .Map(dest => MappingHelpers.MapDemographics(src), src => dest.Demographics)
                .Map(dest => src.Adapt<Models.Xpm.Identifier>(), src => dest.Identifier)
                .Map(dest => new List<Models.Xpm.UserRole>(), src => dest.UserRoles)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Identifier, SdocAdapter.Root>.ForType()
                .Map(dest => src.PatientVisit.AccountNumber, src => dest.AccountNumber)
                .Map(dest => src.Patient.PatientIdentifierList_AssigningAuthority, src => dest.AssigningAuthority)
                .Map(dest => src.Patient.PatientIdentifierList_AssigningFacility, src => dest.AssigningFacility)
                .Map(dest => src.Patient.PatientIdentifierList_IdentifierTypeCode, src => dest.IdentifierTypeCode)
                .Map(dest => src.Patient.MedicalRecordNumber, src => dest.MedicalRecordNumber)
                .Map(dest => src.Patient.PatientIdentifierList_FacilityUniversalID, src => dest.UniversalId)
                .Map(dest => src.Patient.ClientUniversalId, src => dest.UniversalId)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Demographics, (SdocAdapter.Patient, SdocAdapter.MSP)>.ForType()
                .Map(dest => src.Patient.Adapt<Models.Xpm.Address>(), src => dest.Address)
                .Map(dest => src.Patient.Adapt<Models.Xpm.Phone>(), src => dest.Phone)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Address, SdocAdapter.Patient>.ForType()
                .Map(dest => src.Address1, src => dest.Address1)
                .Map(dest => src.Address2, src => dest.Address2)
                .Map(dest => src.Address_AddressType, src => dest.AddressType)
                .Map(dest => src.City, src => dest.City)
                .Map(dest => src.Address_Country, src => dest.Country)
                .Map(dest => src.Address_CountyOrParishCode, src => dest.CountyOrParishCode)
                .Map(dest => src.CountyCode, src => dest.CountyCode)
                .Map(dest => src.POBoxNumber, src => dest.POBoxNumber)
                .Map(dest => src.State, src => dest.State)
                .Map(dest => src.StreetName, src => dest.StreetName)
                .Map(dest => src.StreetNumber, src => dest.StreetNumber)
                .Map(dest => src.Zip, src => dest.Zip)
                .Map(dest => src.ZipExtension, src => dest.ZipExtension)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Phone, SdocAdapter.Patient>.ForType()
                .Map(dest => src.HomePhone, src => dest.HomePhone)
                .Map(dest => src.HomePhoneNumber_TelecommunicationUseCode, src => dest.HomePhoneUseCode)
                .Map(dest => src.WorkPhone, src => dest.WorkPhone)
                .Map(dest => src.WorkPhone, src => dest.BusinessPhone)
                .Map(dest => src.WorkPhone, src => dest.EmployerPhoneNumber)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Guarantor, SdocAdapter.Guarantor>.ForType()
                .Map(dest => src.Address1, src => dest.Address1)
                .Map(dest => src.Address2, src => dest.Address2)
                .Map(dest => src.Address_AddressType, src => dest.AddressType)
                .Map(dest => src.BeginDate, src => dest.BeginDate)
                .Map(dest => src.BusinessPhone, src => dest.BusinessPhone)
                .Map(dest => src.BusinessPhone, src => dest.WorkPhone)
                .Map(dest => src.City, src => dest.City)
                .Map(dest => src.ClientRelationshipToPatient, src => dest.ClientRelationshipToPatient)
                .Map(dest => src.EmergencyContactLastName, src => dest.ContactPersonsName)
                .Map(dest => src.EmergencyContactPhoneNumber, src => dest.ContactPersonsTelephoneNumber)
                .Map(dest => src.EmergencyContactRelationship, src => dest.ContactRelationship)
                .Map(dest => src.County, src => dest.County)
                .Map(dest => src.Address_Country, src => dest.Country)
                .Map(dest => src.Address_CountyOrParishCode, src => dest.CountyCode)
                .Map(dest => src.CountyCode, src => dest.CountyCode)
                .Map(dest => src.DateOfBirth.ToString("s"), src => dest.Dob)
                .Map(dest => src.EmailAddress, src => dest.EmailAddress)
                .Map(dest => src.EmployerAddress_State, src => dest.EmployerAddressState)
                .Map(dest => src.EmployerAddress_Zip, src => dest.EmployerAddressZip)
                .Map(dest => src.EmployerAddress_City, src => dest.EmployerCity)
                .Map(dest => src.EmployerFirstName, src => dest.EmployerFirstName)
                .Map(dest => src.EmployerID, src => dest.EmployerId)
                .Map(dest => src.EmployerLastName, src => dest.EmployerLastName)
                .Map(dest => src.GuarantorEmployerOrganizationName, src => dest.EmployerOrganizationName)
                .Map(dest => src.EmployerAddress_OtherDesignation, src => dest.EmployerOtherDesignation)
                .Map(dest => src.EmployerAddress_State, src => dest.EmployerState)
                .Map(dest => src.EmployerAddress_StreetAddress, src => dest.EmployerStreetAddress)
                .Map(dest => src.EmployerAddress_Zip, src => dest.EmployerZip)
                .Map(dest => src.EmploymentStatus, src => dest.EmploymentStatus)
                .Map(dest => src.Ethnicity, src => dest.EthnicGroup)
                .Map(dest => src.FirstName, src => dest.FirstName)
                .Map(dest => src.Age, src => dest.GuarantorAge)
                .Map(dest => src.Sex, src => dest.GuarantorAdministrativeSex)
                .Map(dest => src.BirthPlace, src => dest.GuarantorBirthPlace)
                .Map(dest => src.EmployerPhoneNumber, src => dest.GuarantorEmployerPhoneNumber)
                .Map(dest => src.GuarantorEmployerOrganizationName, src => dest.GuarantorEmployersOrganizationName)
                .Map(dest => src.FamilySize, src => dest.GuarantorHouseholdSize)
                .Map(dest => src.MonthlyIncome, src => dest.GuarantorHouseholdAnnualIncome)
                .Map(dest => src.GuarantorMaritalStatusCode, src => dest.GuarantorMaritalStatusCode)
                .Map(dest => src.MaritalStatus, src => dest.GuarantorMaritalStatusCode)
                .Map(dest => src.Number, src => dest.GuarantorNumber)
                .Map(dest => src.GuarantorType, src => dest.GuarantorType)
                .Map(dest => src.HomePhone, src => dest.HomePhone)
                .Map(dest => src.HomePhoneNumber_TelecommunicationUseCode, src => dest.HomePhoneUseCode)
                .Map(dest => src.Number_IDNumber, src => dest.IdNumber)
                .Map(dest => src.LastName, src => dest.LastName)
                .Map(dest => src.GuarantorMaritalStatusCode, src => dest.MaritalStatusCode)
                .Map(dest => src.MothersIdentifier, src => dest.MothersIdentifier)
                .Map(dest => src.MothersMaidenName_FamilyName, src => dest.MothersIdentifier)
                .Map(dest => src.MothersMaidenName_GivenName, src => dest.MothersIdentifier)
                .Map(dest => src.MiddleName, src => dest.MiddleName)
                .Map(dest => src.Name_Prefix, src => dest.NamePrefix)
                .Map(dest => src.NameSuffix, src => dest.NameSuffix)
                .Map(dest => src.ProfessionalSuffix, src => dest.NameSuffix)
                .Map(dest => src.PassportRelationshipToPatientCode, src => dest.PassportRelationshipToPatientCode)
                .Map(dest => src.PrimaryLanguage_Identifier, src => dest.PrimaryLanguageIdentifier)
                .Map(dest => src.Language, src => dest.PrimaryLanguageIdentifier)
                .Map(dest => src.Race, src => dest.Race)
                .Map(dest => src.ReceivedGuarantorInformation, src => dest.ReceivedGuarantorInformation)
                .Map(dest => src.RelationshipToPatient, src => dest.RelationshipToPatient)
                .Map(dest => src.PassportRelationshipToPatientDesc, src => dest.RelationshipToPatient)
                .Map(dest => src.Religion, src => dest.Religion)
                .Map(dest => src.SSN, src => dest.Ssn)
                .Map(dest => src.State, src => dest.State)
                .Map(dest => src.StreetNumber, src => dest.StreetAddress1)
                .Map(dest => src.StreetName, src => dest.StreetAddress2)
                .Map(dest => src.Zip, src => dest.Zip)
                .Map(dest => src.ZipExtension, src => dest.ZipExtension)
                .IgnoreNonMapped(true);
        }
    }
}
