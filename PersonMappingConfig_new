using EH.Shared.SdocToXpmConverter.Mapping.Tools;
using Mapster;

namespace EH.Shared.SdocToXpmConverter.Mapping.Configs
{
    public class InvertedPersonMappingConfig : IRegister
    {
        public void Register(TypeAdapterConfig config)
        {
            // Mapping config to convert Sdoc to Models.Xpm.Person
            TypeAdapterConfig<Models.Xpm.Person, SdocAdapter.Root>.ForType()
                .Map(dest => dest.MspEsrd, src => MappingHelpers.MapMsp(src))
                .Map(dest => MappingHelpers.MapDiagnoses(src, dest.Diagnoses))
                .Map(dest => MappingHelpers.MapGuarantors(src, dest.Guarantors))
                .Map(dest => MappingHelpers.MapFamilyMembers(src, dest.FamilyMembers))
                .Map(dest => MappingHelpers.MapInsurances(src, dest.Insurances))
                .Map(dest => MappingHelpers.MapNextOfKins(src, dest.NextofKins))
                .Map(dest => src.Patient, src => src.Adapt<SdocAdapter.Root>())
                .Map(dest => src.UserRoles, src => src.Adapt<SdocAdapter.UserRole>())
                .Map(dest => MappingHelpers.MapSpouses(src, dest.Spouses))
                .Map(dest => MappingHelpers.MapBeneficiarys(src, dest.Beneficiarys))
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.UserRole, SdocAdapter.UserRole>.ForType()
                .Map(dest => src.RolePerson_GivenName, src => dest.FirstName)
                .Map(dest => src.RolePerson_MiddleName, src => dest.MiddleName)
                .Map(dest => src.RolePerson_FamilyName, src => dest.LastName)
                .Map(dest => src.RolePerson_IDNumber, src => dest.PersonIdentifier)
                .Map(dest => src.Ordinality, src => dest.RolId)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.MspEsrd, SdocAdapter.MSP>.ForType()
                .Map(dest => src.DialysisBeginDate, src => dest.DialysisBeginDate)
                .Map(dest => src.DualEntitlementStatus, src => dest.DualEntitlementStatus)
                .Map(dest => src.InitialEntitlementStatus, src => dest.InitialEntitlementStatus)
                .Map(dest => src.KidneyTransplantStatus, src => dest.KidneyTransplantStatus)
                .Map(dest => src.MaintenanceDialysisStatus, src => dest.MaintenanceDialysisStatus)
                .Map(dest => src.SelfDialysisTrainingDate, src => dest.SelfDialysisTrainingDate)
                .Map(dest => src.SelfDialysisTrainingStatus, src => dest.SelfDialysisTrainingStatus)
                .Map(dest => src.ThirtyMonthCOBStatus, src => dest.ThirtyMonthCOBStatus)
                .Map(dest => src.TransplantDate, src => dest.TransplantDate)
                .Map(dest => src.WorkingAgedOrDisabilityMSPStatus, src => dest.WorkingAgedOrDisabilityMSPStatus)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.FamilyMember, SdocAdapter.MSP>.ForType()
                .Map(dest => src.FamilyMemberEmployerPhoneNumber, src => dest.FmEmployerPhoneNumber)
                .Map(dest => src.FamilyMemberEmployerAddress_ZipCode, src => dest.FmEmployerAddressZip)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Patient, SdocAdapter.Root>.ForType()
                .Map(dest => new List<Models.Xpm.AccessRestriction>(), src => dest.AccessRestrictions)
                .Map(dest => new List<Models.Xpm.Allergy>(), src => dest.Allergies)
                .Map(dest => MappingHelpers.MapDemographics(src), src => dest.Demographics)
                .Map(dest => src.Adapt<Models.Xpm.Identifier>(), src => dest.Identifier)
                .Map(dest => new List<Models.Xpm.UserRole>(), src => dest.UserRoles)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Identifier, SdocAdapter.Root>.ForType()
                .Map(dest => src.PatientVisit.AccountNumber, src => dest.AccountNumber)
                .Map(dest => src.Patient.PatientIdentifierList_AssigningAuthority, src => dest.AssigningAuthority)
                .Map(dest => src.Patient.PatientIdentifierList_AssigningFacility, src => dest.AssigningFacility)
                .Map(dest => src.Patient.PatientIdentifierList_IdentifierTypeCode, src => dest.IdentifierTypeCode)
                .Map(dest => src.Patient.MedicalRecordNumber, src => dest.MedicalRecordNumber)
                .Map(dest => src.Patient.PatientIdentifierList_FacilityUniversalID, src => dest.UniversalId)
                .Map(dest => src.Patient.ClientUniversalId, src => dest.UniversalId)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Demographics, (SdocAdapter.Patient, SdocAdapter.MSP)>.ForType()
                .Map(dest => src.Patient.Adapt<Models.Xpm.Address>(), src => dest.Address)
                .Map(dest => src.Patient.Adapt<Models.Xpm.Phone>(), src => dest.Phone)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Address, SdocAdapter.Patient>.ForType()
                .Map(dest => src.Address1, src => dest.Address1)
                .Map(dest => src.Address2, src => dest.Address2)
                .Map(dest => src.Address_AddressType, src => dest.AddressType)
                .Map(dest => src.City, src => dest.City)
                .Map(dest => src.Address_Country, src => dest.Country)
                .Map(dest => src.Address_CountyOrParishCode, src => dest.CountyOrParishCode)
                .Map(dest => src.CountyCode, src => dest.CountyCode)
                .Map(dest => src.POBoxNumber, src => dest.POBoxNumber)
                .Map(dest => src.State, src => dest.State)
                .Map(dest => src.StreetName, src => dest.StreetName)
                .Map(dest => src.StreetNumber, src => dest.StreetNumber)
                .Map(dest => src.Zip, src => dest.Zip)
                .Map(dest => src.ZipExtension, src => dest.ZipExtension)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Phone, SdocAdapter.Patient>.ForType()
                .Map(dest => src.HomePhone, src => dest.HomePhone)
                .Map(dest => src.HomePhoneNumber_TelecommunicationUseCode, src => dest.HomePhoneUseCode)
                .Map(dest => src.WorkPhone, src => dest.WorkPhone)
                .Map(dest => src.WorkPhone, src => dest.BusinessPhone)
                .Map(dest => src.WorkPhone, src => dest.EmployerPhoneNumber)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<Models.Xpm.Guarantor, SdocAdapter.Guarantor>.ForType()
                .Map(dest => src.Address1, src => dest.Address1)
                .Map(dest => src.Address2, src => dest.Address2)
                .Map(dest => src.Address_AddressType, src => dest.AddressType)
                .Map(dest => src.BeginDate, src => dest.BeginDate)
                .Map(dest => src.BusinessPhone, src => dest.BusinessPhone)
                .Map(dest => src.BusinessPhone, src => dest.WorkPhone)
                .Map(dest => src.City, src => dest.City)
                .Map(dest => src.ClientRelationshipToPatient, src => dest.ClientRelationshipToPatient)
                .Map(dest => src.EmergencyContactLastName, src => dest.ContactPersonsName)
                .Map(dest => src.EmergencyContactPhoneNumber, src => dest.ContactPersonsTelephoneNumber)
                .Map(dest => src.EmergencyContactRelationship, src => dest.ContactRelationship)
                .Map(dest => src.County, src => dest.County)
                .Map(dest => src.Address_Country, src => dest.Country)
                .Map(dest => src.Address_CountyOrParishCode, src => dest.CountyCode)
                .Map(dest => src.CountyCode, src => dest.CountyCode)
                .Map(dest => src.DateOfBirth.ToString("s"), src => dest.Dob)
                .Map(dest => src.EmailAddress, src => dest.EmailAddress)
                .Map(dest => src.EmployerAddress_State, src => dest.EmployerAddressState)
                .Map(dest => src.EmployerAddress_Zip, src => dest.EmployerAddressZip)
                .Map(dest => src.EmployerAddress_City, src => dest.EmployerCity)
                .Map(dest => src.EmployerFirstName, src => dest.EmployerFirstName)
                .Map(dest => src.EmployerID, src => dest.EmployerId)
                .Map(dest => src.EmployerLastName, src => dest.EmployerLastName)
                .Map(dest => src.GuarantorEmployerOrganizationName, src => dest.EmployerOrganizationName)
                .Map(dest => src.EmployerAddress_OtherDesignation, src => dest.EmployerOtherDesignation)
                .Map(dest => src.EmployerAddress_State, src => dest.EmployerState)
                .Map(dest => src.EmployerAddress_StreetAddress, src => dest.EmployerStreetAddress)
                .Map(dest => src.EmployerAddress_Zip, src => dest.EmployerZip)
                .Map(dest => src.EmploymentStatus, src => dest.EmploymentStatus)
                .Map(dest => src.Ethnicity, src => dest.EthnicGroup)
                .Map(dest => src.FirstName, src => dest.FirstName)
                .Map(dest => src.Age, src => dest.GuarantorAge)
                .Map(dest => src.Sex, src => dest.GuarantorAdministrativeSex)
                .Map(dest => src.BirthPlace, src => dest.GuarantorBirthPlace)
                .Map(dest => src.EmployerPhoneNumber, src => dest.GuarantorEmployerPhoneNumber)
                .Map(dest => src.GuarantorEmployerOrganizationName, src => dest.GuarantorEmployersOrganizationName)
                .Map(dest => src.FamilySize, src => dest.GuarantorHouseholdSize)
                .Map(dest => src.MonthlyIncome, src => dest.GuarantorHouseholdAnnualIncome)
                .Map(dest => src.GuarantorMaritalStatusCode, src => dest.GuarantorMaritalStatusCode)
                .Map(dest => src.MaritalStatus, src => dest.GuarantorMaritalStatusCode)
                .Map(dest => src.Number, src => dest.GuarantorNumber)
                .Map(dest => src.GuarantorType, src => dest.GuarantorType)
                .Map(dest => src.HomePhone, src => dest.HomePhone)
                .Map(dest => src.HomePhoneNumber_TelecommunicationUseCode, src => dest.HomePhoneUseCode)
                .Map(dest => src.Number_IDNumber, src => dest.IdNumber)
                .Map(dest => src.LastName, src => dest.LastName)
                .Map(dest => src.GuarantorMaritalStatusCode, src => dest.MaritalStatusCode)
                .Map(dest => src.MothersIdentifier, src => dest.MothersIdentifier)
                .Map(dest => src.MothersMaidenName_FamilyName, src => dest.MothersIdentifier)
                .Map(dest => src.MothersMaidenName_GivenName, src => dest.MothersIdentifier)
                .Map(dest => src.MiddleName, src => dest.MiddleName)
                .Map(dest => src.Name_Prefix, src => dest.NamePrefix)
                .Map(dest => src.NameSuffix, src => dest.NameSuffix)
                .Map(dest => src.ProfessionalSuffix, src => dest.NameSuffix)
                .Map(dest => src.PassportRelationshipToPatientCode, src => dest.PassportRelationshipToPatientCode)
                .Map(dest => src.PrimaryLanguage_Identifier, src => dest.PrimaryLanguageIdentifier)
                .Map(dest => src.Language, src => dest.PrimaryLanguageIdentifier)
                .Map(dest => src.Race, src => dest.Race)
                .Map(dest => src.ReceivedGuarantorInformation, src => dest.ReceivedGuarantorInformation)
                .Map(dest => src.RelationshipToPatient, src => dest.RelationshipToPatient)
                .Map(dest => src.PassportRelationshipToPatientDesc, src => dest.RelationshipToPatient)
                .Map(dest => src.Religion, src => dest.Religion)
                .Map(dest => src.SSN, src => dest.Ssn)
                .Map(dest => src.State, src => dest.State)
                .Map(dest => src.StreetNumber, src => dest.StreetAddress1)
                .Map(dest => src.StreetName, src => dest.StreetAddress2)
                .Map(dest => src.Zip, src => dest.Zip)
                .Map(dest => src.ZipExtension, src => dest.ZipExtension)
                .IgnoreNonMapped(true);
        }
    }
}

TypeAdapterConfig<(Models.Xpm.Insurance Insurance, Models.Xpm.Calculated Calculated, Models.Xpm.Subscriber Subscriber, Models.Xpm.Diagnosis Diagnosis, Models.Xpm.NextOfKin NextOfKin), SdocAdapter.Insurance>.ForType()
    .Map(dest => dest.Insurance.AccidentDate, src => src.AccidentDate)
    .Map(dest => dest.Insurance.AssignmentOfBenefits, src => src.AssignmentOfBenefits)
    .Map(dest => dest.Insurance.BadPlanCodeIncorrectPlanCode, src => src.BadPlanCodeIncorrectPlanCode)
    .Map(dest => dest.Insurance.BadPlanCodeMessage, src => src.BadPlanCodeMessage)
    .Map(dest => dest.Insurance.BadPlanCodeRecommendedPlanCode, src => src.BadPlanCodeRecommendedPlanCode)
    .Map(dest => dest.Insurance.BillingStatus, src => src.BillingStatus)
    .Map(dest => dest.Insurance.Branch, src => src.Branch)
    .Map(dest => dest.Insurance.BypassPayerCodeMapping, src => src.BypassPayerCodeMapping)
    .Map(dest => dest.Insurance.Calculated, src => src.Calculated.Adapt<SdocAdapter.Calculated>())
    .Map(dest => dest.Insurance.CardControlNumber, src => src.CardControlNumber)
    .Map(dest => dest.Insurance.CardNumber, src => src.CardNumber)
    .Map(dest => dest.Insurance.CDProcID, src => src.CDProcId)
    .Map(dest => dest.Insurance.CDReqID, src => src.CDReqId)
    .Map(dest => dest.Insurance.CertificationBeginDate, src => src.CertificationBeginDate)
    .Map(dest => dest.Insurance.CertificationEndDate, src => src.CertificationEndDate)
    .Map(dest => dest.Insurance.CertificationEndDate, src => src.CertificationExpireDate)
    .Map(dest => dest.Insurance.ChainedBatchRecordID, src => src.ChainedBatchRecordId)
    .Map(dest => dest.Insurance.ClientCompanyID, src => src.ClientCompanyId)
    .Map(dest => dest.Insurance.ClientPayerMnemonic, src => src.ClientPayerMnemonic)
    .Map(dest => dest.Insurance.ClientPlanID, src => src.ClientPlanId)
    .Map(dest => dest.Insurance.CompanyPlanCode, src => src.CompanyPlanCode)
    .Map(dest => dest.Insurance.CoordOfBenPriority, src => src.CoordOfBenPriority)
    .Map(dest => dest.Insurance.CoordinationOfBenefits, src => src.CoordinationOfBenefits)
    .Map(dest => dest.Insurance.DLPVID, src => src.DLPVId)
    .Map(dest => dest.Insurance.DSID, src => src.DSId)
    .Map(dest => dest.Insurance.DateRun, src => src.DateRun)
    .Map(dest => dest.Insurance.DisplayWorkcenter, src => src.DisplayWorkcenter)
    .Map(dest => dest.Insurance.EffectiveDate, src => src.EffectiveDate)
    .Map(dest => dest.Insurance.FacilityNetworkIdentificationNumber, src => src.FacilityNetworkIdentificationNumber)
    .Map(dest => dest.Insurance.GenericResponseTypeDescription, src => src.GenericResponseTypeDescription)
    .Map(dest => dest.Insurance.GenericResponseTypeID, src => src.GenericResponseTypeId)
    .Map(dest => dest.Insurance.GHPInsuredRelationshipRelationshipDescription, src => src.Root.GHPInsuredRelationshipRelationshipDescription)
    .Map(dest => dest.Insurance.GroupName, src => src.GroupName)
    .Map(dest => dest.Insurance.GroupName, src => src.GroupNumber)
    .Map(dest => dest.Insurance.HCFAPatientRelationshipToInsured, src => src.HcfaPatientRelationshipToInsured)
    .Map(dest => dest.Insurance.HospitalEffectiveDate, src => src.HospitalEffectiveDate)
    .Map(dest => dest.Insurance.SetID, src => src.In1SetId)
    .Map(dest => dest.Insurance.Index, src => src.Index)
    .Map(dest => dest.Insurance.InsuranceCompanyAddress_City, src => src.InsCompanyCity)
    .Map(dest => dest.Insurance.City, src => src.InsCompanyCity)
    .Map(dest => dest.Insurance.InsuranceCompanyAddress_OtherDesignation, src => src.InsCompanyOtherDesignation)
    .Map(dest => dest.Insurance.Address2, src => src.InsCompanyOtherDesignation)
    .Map(dest => dest.Insurance.InsuranceCoPhoneNumber, src => src.InsCompanyPhoneNumber)
    .Map(dest => dest.Insurance.InsuranceCompanyAddress_State, src => src.InsCompanyState)
    .Map(dest => dest.Insurance.State, src => src.InsCompanyState)
    .Map(dest => dest.Insurance.InsuranceCompanyAddress_StreetAddress, src => src.InsCompanyStreetAddress)
    .Map(dest => dest.Insurance.Address1, src => src.InsCompanyStreetAddress)
    .Map(dest => dest.Insurance.InsuranceCompanyAddress_Zip, src => src.InsCompanyZip)
    .Map(dest => dest.Insurance.Zip, src => src.InsCompanyZip)
    .Map(dest => dest.Insurance.InsuranceAuthorizationInformation, src => src.InsuranceAuthorizationInformation)
    .Map(dest => dest.Insurance.InsuranceID, src => src.InsuranceId)
    .Map(dest => dest.Insurance.CertificationNumber, src => src.CertificationNumber)
    .Map(dest => dest.Insurance.InsuranceType, src => src.InsuranceType)
    .Map(dest => dest.Insurance.IsDupe, src => src.IsDupe)
    .Map(dest => dest.Insurance.IsPrimary, src => src.IsPrimary)
    .Map(dest => dest.Insurance.IsTermed, src => src.IsTermed)
    .Map(dest => dest.Insurance.MajorMedicalFlag, src => src.MajorMedicalFlag)
    .Map(dest => dest.Insurance.MajorMedicalPresentLoc, src => src.MajorMedicalPresentLoc)
    .Map(dest => dest.Insurance.MasterPolicyNumber, src => src.MasterPolicyNumber)
    .Map(dest => dest.Insurance.MedicalAssistanceBenefitPackage, src => src.MedicalAssistanceBenefitPackage)
    .Map(dest => dest.Insurance.MedicalAssistanceProgramStatus, src => src.MedicalAssistanceProgramStatus)
    .Map(dest => dest.Insurance.MedicalAssistanceResourceCode, src => src.MedicalAssistanceResourceCode)
    .Map(dest => dest.Insurance.MedicareHealthInsCardNumber, src => src.MedicareHealthInsCardNumber)
    .Map(dest => dest.Insurance.MedicareLifetimeSignatureAuthDate, src => src.MedicareLifetimeSignatureAuthDate)
    .Map(dest => dest.Insurance.MedicareLifetimeSignatureAuthLocation, src => src.MedicareLifetimeSignatureAuthLocation)
    .Map(dest => dest.Insurance.Ordinality, src => src.InsuranceOrdinality)
    .Map(dest => dest.Insurance.OverrideInsuranceAddress, src => src.OverrideInsuranceAddress)
    .Map(dest => dest.Insurance.OverrideInsuranceCity, src => src.OverrideInsuranceCity)
    .Map(dest => dest.Insurance.OverrideInsuranceName, src => src.OverrideInsuranceName)
    .Map(dest => dest.Insurance.OverrideInsuranceState, src => src.OverrideInsuranceState)
    .Map(dest => dest.Insurance.OverrideInsuranceZip, src => src.OverrideInsuranceZip)
    .Map(dest => dest.Insurance.PassportInsuranceFound, src => src.PassportInsuranceFound)
    .Map(dest => dest.Insurance.PassportPayerDescription, src => src.PassportPayerDescription)
    .Map(dest => dest.Insurance.PassportPayerMnemonic, src => src.PassportPayerMnemonic)
    .Map(dest => dest.Insurance.PassportPayerMnemonicOverride, src => src.PassportPayerMnemonicOverride)
    .Map(dest => dest.Insurance.PatientMemberNumber_IDNumber, src => src.PatientMemberIdNumber)
    .Map(dest => dest.Insurance.PatientMemberNumber_IDNumber, src => src.PatientMemberNumber)
    .Map(dest => dest.Insurance.InsurancePrimaryAuthorization, src => src.PayerId)
    .Map(dest => dest.Insurance.PlanNumber, src => src.PlanNumber)
    .Map(dest => dest.Insurance.PayerCost, src => src.PayerCost)
    .Map(dest => dest.Insurance.ClientPayerDescription, src => src.PayerName)
    .Map(dest => dest.Insurance.PlanIdentifier, src => src.PlanId)
    .Map(dest => dest.Insurance.InsurancePlanType, src => src.PlanType)
    .Map(dest => dest.Insurance.POQFinal, src => src.PoqFinal)
    .Map(dest => dest.Insurance.PPOIndicator, src => src.PPOIndicator)
    .Map(dest => dest.Insurance.PreAdmitCertPAC, src => src.PreAdmitCertPac)
    .Map(dest => dest.Insurance.PrivateRoomRate, src => src.PrivateRoomRate)
    .Map(dest => dest.Insurance.ProfeeAddress, src => src.ProfeeAddress)
    .Map(dest => dest.Insurance.ProfeeCity, src => src.ProfeeCity)
    .Map(dest => dest.Insurance.ProfeeMailTo, src => src.ProfeeMailTo)
    .Map(dest => dest.Insurance.ProfeePhoneNumber, src => src.ProfeePhoneNumber)
    .Map(dest => dest.Insurance.ProfeeState, src => src.ProfeeState)
    .Map(dest => dest.Insurance.ProfeeZip, src => src.ProfeeZip)
    .Map(dest => dest.Insurance.PropertyAndCasualtyClaimNumber, src => src.PropertyAndCasualtyClaimNumber)
    .Map(dest => dest.Insurance.RqaPayerMappingCode, src => src.RqaPayerMappingCode)
    .Map(dest => dest.Insurance.RqaPayerMappingDescription, src => src.RqaPayerMappingDescription)
    .Map(dest => dest.Insurance.RanByUserID, src => src.RanByUserId)
    .Map(dest => dest.Insurance.RanByUsername, src => src.RanByUsername)
    .Map(dest => dest.Insurance.ReAddedInsurance, src => src.ReAddedInsurance)
    .Map(dest => dest.Insurance.ReleaseInformationCode, src => src.ReleaseInformationCode)
    .Map(dest => dest.Insurance.ReportofEligibilityFlag, src => src.ReportOfEligibilityFlag)
    .Map(dest => dest.Insurance.RequestedServiceType, src => src.RequestedServiceType)
    .Map(dest => dest.Insurance.Response271, src => src.Response271)
    .Map(dest => dest.Insurance.ResponseCount, src => src.ResponseCount)
    .Map(dest => dest.Insurance.Response_HTML, src => src.ResponseHtml)
    .Map(dest => dest.Insurance.Response_Raw, src => src.ResponseRaw)
    .Map(dest => dest.Insurance.Response_Text, src => src.ResponseText)
    .Map(dest => dest.Insurance.Response_HiDefXML, src => src.ResponseHiDefXml)
    .Map(dest => dest.Insurance.RetirementDate, src => src.RetirementDate)
    .Map(dest => dest.Insurance.SemiPrivateRoomRate, src => src.SemiPrivateRoomRate)
    .Map(dest => dest.Insurance.Subscriber.Adapt<SdocAdapter.Subscriber>(), src => src.Subscriber)
    .Map(dest => dest.Insurance.TermDate, src => src.TermDate)
    .Map(dest => dest.Insurance.TrackingNumber, src => src.InsTrackingNumber)
    .Map(dest => dest.Insurance.TriggeredIns, src => src.TriggeredIns)
    .Map(dest => dest.Insurance.TypeOfAgreementCode, src => src.TypeOfAgreementCode)
    .Map(dest => dest.Insurance.UserAdded, src => src.UserAdded)
    .Map(dest => dest.Insurance.VerificationBy, src => src.VerificationBy)
    .Map(dest => dest.Insurance.VerificationStatus, src => src.VerificationStatus)
    .IgnoreNonMapped(true);

TypeAdapterConfig<(SdocAdapter.Insurance Insurance, SdocAdapter.Root Root), Models.Xpm.Calculated>.ForType()
    .Map(dest => dest.AccidentDate, src => src.Insurance.AccidentDate)
    .Map(dest => dest.AdmitURN, src => src.Root.PatientVisit.AdmitURN)
    .Map(dest => dest.CardNumber, src => src.Insurance.CardNumber)
    .Map(dest => dest.ClientPayerMnemonic, src => src.Insurance.ClientPayerMnemonic)
    .Map(dest => dest.ExperianAdded, src => src.Insurance.PassportInsuranceFound)
    .Map(dest => dest.InsuranceType, src => src.Insurance.InsuranceType)
    .Map(dest => dest.MedicalAssistanceBenefitPackage, src => src.Insurance.MedicalAssistanceBenefitPackage)
    .Map(dest => dest.MedicalAssistanceResourceCode, src => src.Insurance.MedicalAssistanceResourceCode)
    .Map(dest => dest.OverrideInsuranceAddress, src => src.Insurance.OverrideInsuranceAddress)
    .Map(dest => dest.OverrideInsuranceCity, src => src.Insurance.OverrideInsuranceCity)
    .Map(dest => dest.OverrideInsuranceName, src => src.Insurance.OverrideInsuranceName)
    .Map(dest => dest.OverrideInsuranceState, src => src.Insurance.OverrideInsuranceState)
    .Map(dest => dest.OverrideInsuranceZIP, src => src.Insurance.OverrideInsuranceZip)
    .IgnoreNonMapped(true);

TypeAdapterConfig<(SdocAdapter.Subscriber Subscriber, SdocAdapter.Root Root), Models.Xpm.Subscriber>.ForType()
    .Map(dest => dest.Address1, src => src.Subscriber.Address1)
    .Map(dest => dest.Address2, src => src.Subscriber.Address2)
    .Map(dest => dest.City, src => src.Subscriber.City)
    .Map(dest => dest.ClientRelationshipToPatient, src => src.Subscriber.ClientRelationshipToPatient)
    .Map(dest => dest.DateOfBirth, src => src.Subscriber.DateOfBirth)
    .Map(dest => dest.EmployeeId, src => src.Subscriber.EmployeeID)
    .Map(dest => dest.EmployerName, src => src.Subscriber.EmployerName)
    .Map(dest => dest.EmploymentStatus, src => src.Subscriber.EmploymentStatus)
    .Map(dest => dest.FirstName, src => src.Subscriber.FirstName)
    .Map(dest => dest.InsuredsPhoneNumberHome, src => src.Subscriber.SubscriberHomePhone)
    .Map(dest => dest.InsuredsEmployerPhoneNumber, src => src.Subscriber.SubscriberWorkPhone)
    .Map(dest => dest.GroupEmployerId, src => src.Subscriber.InsuredsGroupEmpID)
    .Map(dest => dest.GroupEmpName, src => src.Subscriber.InsuredsGroupEmpName)
    .Map(dest => dest.GuarantorsRelationshipToInsured, src => src.Subscriber.GuarantorsRelationshipToInsured)
    .Map(dest => dest.HicNumber, src => src.Subscriber.HICNumber)
    .Map(dest => dest.InsuredIdNumber, src => src.Subscriber.InsuredIDNumber)
    .Map(dest => dest.LastName, src => src.Subscriber.LastName)
    .Map(dest => dest.MedicareHealthInsCardNumber, src => src.Subscriber.MedicaidID)
    .Map(dest => dest.MiddleName, src => src.Subscriber.MiddleName)
    .Map(dest => dest.NameSuffix, src => src.Subscriber.NameSuffix)
    .Map(dest => dest.OrganizationName, src => src.Subscriber.InsuredsGroupEmpOrganizationName)
    .Map(dest => dest.OriginalRelationshipToPatientCode, src => src.Subscriber.OriginalRelationshipToPatientCode)
    .Map(dest => dest.Sex, src => src.Subscriber.Sex)
    .Map(dest => dest.Ssn, src => src.Subscriber.SSN)
    .Map(dest => dest.State, src => src.Subscriber.State)
    .Map(dest => dest.SubscriberId, src => src.Subscriber.SubscriberID)
    .Map(dest => dest.Zip, src => src.Subscriber.Zip)
    .IgnoreNonMapped(true);

TypeAdapterConfig<SdocAdapter.PatientVisit, Models.Xpm.Diagnosis>.ForType()
    .Map(dest => dest.DiagnosisCode, src => src.DiagnosisCode1)
    .Map(dest => dest.DiagnosisCodeAlternateText, src => src.DiagnosisCode1AlternateText)
    .Map(dest => dest.DiagnosisCodingMethod, src => src.DiagnosisCodeMethod)
    .Map(dest => dest.DiagnosisDescription, src => src.DiagnosisDescription)
    .Map(dest => dest.DiagnosisType, src => src.DiagnosisType)
    .Map(dest => dest.MajorDiagnosticCategory, src => src.MajorDiagnosticCategory)
    .IgnoreNonMapped(true);

TypeAdapterConfig<SdocAdapter.NextOfKin, Models.Xpm.NextOfKin>.ForType()
    .Map(dest => dest.BusinessPhoneNumber, src => src.BusinessPhoneNumber_PhoneNumber)
    .Map(dest => dest.BusinessPhoneNumberString, src => src.BusinessPhoneNumber_PhoneNumberString)
    .Map(dest => dest.City, src => src.Address_City)
    .Map(dest => dest.ContactRoleIdentifier, src => src.ContactRole_Identifier)
    .Map(dest => dest.ContactRoleText, src => src.ContactRole_Text)
    .Map(dest => dest.FamilyName, src => src.Name_FamilyName)
    .Map(dest => dest.FirstName, src => src.Name_GivenName)
    .Map(dest => dest.GivenName, src => src.Name_GivenName)
    .Map(dest => dest.HomePhoneNumber, src => src.PhoneNumber_PhoneNumber)
    .Map(dest => dest.HomePhoneNumberString, src => src.PhoneNumber_PhoneNumberString)
    .Map(dest => dest.NextOfKinID, src => src.NextOfKinID)
    .Map(dest => dest.LastName, src => src.Name_FamilyName)
    .Map(dest => dest.OtherDesignation, src => src.Address_OtherDesignation)
    .Map(dest => dest.Ordinality, src => src.Ordinality)
    .Map(dest => dest.RelationshipIdentifier, src => src.Relationship_Identifier)
    .Map(dest => dest.RelationshipText, src => src.Relationship_Text)
    .Map(dest => dest.SetId, src => src.SetID)
    .Map(dest => dest.State, src => src.Address_State)
    .Map(dest => dest.StreetAddress, src => src.Address_StreetAddress)
    .Map(dest => dest.Zip, src => src.Address_Zip)
    .IgnoreNonMapped(true);
   }
    }
}
