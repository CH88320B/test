{"error":"Errors:Input string was not in a correct format.","trace":" at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\n at System.Int32.Parse(String s)\n at lambda_method2601(Closure , Object )\n at Mapster.TypeAdapter.Adapt[TDestination](Object source, TypeAdapterConfig config)\n at EH.Shared.SdocJsonToXpmConverter.Mapping.Configs.SdocMappingConfig.MapXpmtoSdoc(Encounters xpmEncounter) in C:\\Users\\C88320B\\source\\repos\\eh.shared.sdocjsontoxpmconverterlambda\\EH.Shared.SdocJsonToXpmConverter\\Mapping\\Configs\\SdocMappingConfig.cs:line 844\n at EH.Shared.SdocJsonToXpmConverterLambda.Function.FunctionHandler(APIGatewayProxyRequest request, ILambdaContext context) in C:\\Users\\C88320B\\source\\repos\\eh.shared.sdocjsontoxpmconverterlambda\\EH.Shared.SdocJsonToXpmConverterLambda\\Function.cs:line 121"}
  try
  {    
      var intermidieclass = JsonConvert.DeserializeObject<XpmRoot>(sdocxpm);
      var rootClass = intermidieclass?.Adapt<XpmRoot>();

      var fisrtencounter = rootClass?.Encounter[0];
      var mapperSdoc = new SdocMappingConfig();
      var sdoRoot = mapperSdoc.MapXpmtoSdoc(fisrtencounter);
      serializedXpm = JsonConvert.SerializeObject(sdoRoot);
  }
  catch (Exception ex)
  {

      Console.Error.WriteLine($"Error:{ex.Message}, trace={ex.StackTrace}");

       var errorObject = new {
       error = $"Errors:{ex.Message}",
      trace =ex.StackTrace,
      //lineNumber = ex.LineNumber,
      // lineposition = ex.LinePosition

      //
      };
      
       serializedXpm = JsonConvert.SerializeObject(errorObject);

      return new APIGatewayProxyResponse
      {
          StatusCode =502,
          Body = serializedXpm,
            Headers = new Dictionary<string, string>
      {
        { "Content-Type", "application/json" },
        { "Access-Control-Allow-Origin", "*" }
      }
      };
