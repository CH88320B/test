using EH.Shared.SdocAdapter;
using EH.Shared.SdocToXpmConverter.Mapping.Tools;
using Mapster;

namespace EH.Shared.SdocToXpmConverter.Mapping.Configs
{
    public class PersonMappingConfig : IRegister
    {
        public void Register( TypeAdapterConfig config )
        {
            // Mapping config for Models.Xpm.Person and dependents.
            TypeAdapterConfig<SdocAdapter.Root, Models.Xpm.Person>.ForType()
                .Map(dest => dest.MspEsrd, src => MappingHelpers.MapMsp(src))
                .Map( dest => dest.Diagnoses, src => MappingHelpers.MapDiagnoses( src.PatientVisit ) )
                .Map( dest => dest.Guarantors, src => MappingHelpers.MapGuarantors( src ) )
                .Map( dest => dest.FamilyMembers, src => MappingHelpers.MapFamilyMembers(src))
                .Map( dest => dest.Insurances, src => MappingHelpers.MapInsurances( src ) )
                .Map( dest => dest.NextofKins, src => MappingHelpers.MapNextOfKins( src ) )
                .Map( dest => dest.Patient, src => src.Adapt<Models.Xpm.Patient>() )
                .Map( dest => dest.UserRoles, src => src.Adapt<Models.Xpm.UserRole>())
                .Map( dest => dest.Spouses, src => MappingHelpers.MapSpouses(src))
                .Map( dest => dest.Beneficiarys, src => MappingHelpers.MapBeneficiarys(src))
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.UserRole, Models.Xpm.UserRole>.ForType()
                .Map(dest => dest.FirstName, src => src.RolePerson_GivenName)
                .Map(dest => dest.MiddleName, src => src.RolePerson_MiddleName)
                .Map(dest => dest.LastName, src => src.RolePerson_FamilyName)
                .Map(dest => dest.PersonIdentifier, src => src.RolePerson_IDNumber)
                .Map(dest => dest.RolId, src => src.Ordinality)
                .IgnoreNonMapped(true);

            TypeAdapterConfig<SdocAdapter.MSP, Models.Xpm.MspEsrd>.ForType()
                .Map(dest => dest.DialysisBeginDate, src => src.DialysisBeginDate)
                .Map(dest => dest.DualEntitlementStatus, src => src.DualEntitlementStatus)
                .Map(dest => dest.InitialEntitlementStatus, src => src.InitialEntitlementStatus)
                .Map(dest => dest.KidneyTransplantStatus, src => src.KidneyTransplantStatus)
                .Map(dest => dest.MaintenanceDialysisStatus, src => src.MaintenanceDialysisStatus)
                .Map(dest => dest.SelfDialysisTrainingDate, src => src.SelfDialysisTrainingDate)
                .Map(dest => dest.SelfDialysisTrainingStatus, src => src.SelfDialysisTrainingStatus)
                .Map(dest => dest.ThirtyMonthCOBStatus, src => src.ThirtyMonthCOBStatus)
                .Map(dest => dest.TransplantDate, src => src.TransplantDate)
                .Map(dest => dest.WorkingAgedOrDisabilityMSPStatus, src => src.WorkingAgedOrDisabilityMSPStatus)
                .IgnoreNonMapped(true);


            TypeAdapterConfig<SdocAdapter.MSP, Models.Xpm.FamilyMember>.ForType()
                .Map(dest => dest.FmEmployerPhoneNumber, src => src.FamilyMemberEmployerPhoneNumber)
                .Map(dest => dest.FmEmployerAddressZip, src => src.FamilyMemberEmployerAddress_ZipCode)
                .IgnoreNonMapped(true);


            TypeAdapterConfig<SdocAdapter.Root, Models.Xpm.Patient>.ForType()
                .Map( dest => dest.AccessRestrictions, src => new List<Models.Xpm.AccessRestriction>() )
                .Map( dest => dest.Allergies, src => new List<Models.Xpm.Allergy>() )
                //.Map( dest => dest.Demographics, src => src.Patient.Adapt<Models.Xpm.Demographics>() )
                .Map(dest => dest.Demographics, src => MappingHelpers.MapDemographics(src))
                .Map( dest => dest.Identifier, src => src.Adapt<Models.Xpm.Identifier>() )
                .Map( dest => dest.UserRoles, src => new List<Models.Xpm.UserRole>() )
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.Root, Models.Xpm.Identifier>.ForType()
                .Map( dest => dest.AccountNumber, src => src.PatientVisit.AccountNumber )
                .Map( dest => dest.AssigningAuthority, src => src.Patient.PatientIdentifierList_AssigningAuthority )
                .Map( dest => dest.AssigningFacility, src => src.Patient.PatientIdentifierList_AssigningFacility )
                .Map( dest => dest.IdentifierTypeCode, src => src.Patient.PatientIdentifierList_IdentifierTypeCode )
                .Map( dest => dest.MedicalRecordNumber, src => src.Patient.MedicalRecordNumber )
                .Map( dest => dest.UniversalId, src => src.Patient.PatientIdentifierList_FacilityUniversalID )
                .Map( dest => dest.UniversalId, src => src.Patient.ClientUniversalId)
                .IgnoreNonMapped( true );

            TypeAdapterConfig<(SdocAdapter.Patient Patient, SdocAdapter.MSP MSP), Models.Xpm.Demographics>.ForType()

                .Map( dest => dest.Address, src => src.Patient.Adapt<Models.Xpm.Address>() )
                .Map( dest => dest.Phone, src => src.Patient.Adapt<Models.Xpm.Phone>())
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.Patient, Models.Xpm.Address>.ForType()
                .Map( dest => dest.Address1, src => src.Address1 )
                .Map( dest => dest.Address2, src => src.Address2 )
                .Map( dest => dest.AddressType, src => src.Address_AddressType )
                .Map( dest => dest.City, src => src.City )
                .Map( dest => dest.Country, src => src.Address_Country )
                .Map( dest => dest.CountyOrParishCode, src => src.Address_CountyOrParishCode )
                .Map( dest => dest.CountyCode, src => src.CountyCode )
                .Map( dest => dest.POBoxNumber, src => src.POBoxNumber)
                .Map( dest => dest.State, src => src.State )
                .Map( dest => dest.StreetName, src => src.StreetName)
                .Map( dest => dest.StreetNumber, src => src.StreetNumber)
                .Map( dest => dest.Zip, src => src.Zip )
                .Map( dest => dest.ZipExtension, src => src.ZipExtension)
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.Patient, Models.Xpm.Phone>.ForType()
                .Map( dest => dest.HomePhoneNumber, src => src.HomePhone )
                .Map( dest => dest.HomePhoneUseCode, src => src.HomePhoneNumber_TelecommunicationUseCode )
                .Map( dest => dest.WorkPhone, src => src.WorkPhone )
                .Map(dest => dest.WorkPhone, src => src.BusinessPhone)
                .Map( dest => dest.WorkPhone, src => src.EmployerPhoneNumber)
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.Guarantor, Models.Xpm.Guarantor>.ForType()
                .Map( dest => dest.Address1, src => src.Address1 )
                .Map( dest => dest.Address2, src => src.Address2 )
                .Map( dest => dest.AddressType, src => src.Address_AddressType )
                .Map( dest => dest.BeginDate, src => src.BeginDate )
                .Map( dest => dest.BusinessPhone, src => src.BusinessPhone )
                .Map( dest => dest.BusinessPhone, src => src.WorkPhone)
                .Map( dest => dest.City, src => src.City )
                .Map( dest => dest.ClientRelationshipToPatient, src => src.ClientRelationshipToPatient )
                .Map( dest => dest.ContactPersonsName, src => src.EmergencyContactLastName)
                .Map( dest => dest.ContactPersonsTelephoneNumber, src => src.EmergencyContactPhoneNumber)
                .Map( dest => dest.ContactRelationship, src => src.EmergencyContactRelationship)
                .Map( dest => dest.County, src => src.County )
                .Map( dest => dest.Country, src => src.Address_Country)
                .Map(dest => dest.CountyCode, src => src.Address_CountyOrParishCode)
                .Map(dest => dest.CountyCode, src => src.CountyCode)
                .Map( dest => dest.Dob, src => src.DateOfBirth.ToString( "s" ) )
                .Map( dest => dest.EmailAddress, src => src.EmailAddress )
                .Map( dest => dest.EmployerAddressState, src => src.EmployerAddress_State)
                .Map( dest => dest.EmployerAddressZip, src => src.EmployerAddress_Zip)
                .Map( dest => dest.EmployerCity, src => src.EmployerAddress_City )
                .Map( dest => dest.EmployerFirstName, src => src.EmployerFirstName )
                .Map( dest => dest.EmployerId, src => src.EmployerID )
                .Map( dest => dest.EmployerLastName, src => src.EmployerLastName )
                .Map( dest => dest.EmployerOrganizationName, src => src.GuarantorEmployerOrganizationName )
                .Map( dest => dest.EmployerOtherDesignation, src => src.EmployerAddress_OtherDesignation )
                .Map( dest => dest.EmployerState, src => src.EmployerAddress_State )
                .Map( dest => dest.EmployerStreetAddress, src => src.EmployerAddress_StreetAddress )
                .Map( dest => dest.EmployerZip, src => src.EmployerAddress_Zip )
                .Map( dest => dest.EmploymentStatus, src => src.EmploymentStatus )
                .Map( dest => dest.EthnicGroup, src => src.Ethnicity)
                .Map( dest => dest.FirstName, src => src.FirstName )
                .Map(dest => dest.GuarantorAge, src => src.Age)
                .Map( dest => dest.GuarantorAdministrativeSex, src => src.Sex )
                .Map( dest => dest.GuarantorBirthPlace, src => src.BirthPlace)
                .Map( dest => dest.GuarantorEmployerPhoneNumber, src => src.EmployerPhoneNumber )
                .Map( dest => dest.GuarantorEmployersOrganizationName, src => src.GuarantorEmployerOrganizationName)
                .Map( dest => dest.GuarantorHouseholdSize, src => src.FamilySize)
                .Map( dest => dest.GuarantorHouseholdAnnualIncome, src => src.MonthlyIncome)
                .Map( dest => dest.GuarantorMaritalStatusCode, src => src.GuarantorMaritalStatusCode)
                .Map( dest => dest.GuarantorMaritalStatusCode, src => src.MaritalStatus)
                .Map( dest => dest.GuarantorNumber, src => src.Number)
                .Map( dest => dest.GuarantorType, src => src.GuarantorType)
                .Map( dest => dest.HomePhone, src => src.HomePhone )
                .Map( dest => dest.HomePhone, src => src.HomePhoneNumber_TelecommunicationUseCode)
                .Map( dest => dest.IdNumber, src => src.Number_IDNumber )
                .Map( dest => dest.LastName, src => src.LastName )
                .Map( dest => dest.MaritalStatusCode, src => src.GuarantorMaritalStatusCode )
                .Map( dest => dest.MothersIdentifier, src => src.MothersIdentifier)
                .Map( dest => dest.MothersIdentifier, src => src.MothersMaidenName_FamilyName)
                .Map( dest => dest.MothersIdentifier, src => src.MothersMaidenName_GivenName)
                .Map( dest => dest.MiddleName, src => src.MiddleName )
                .Map( dest => dest.NamePrefix, src => src.Name_Prefix )
                .Map( dest => dest.NameSuffix, src => src.NameSuffix )
                .Map( dest => dest.NameSuffix, src => src.ProfessionalSuffix)
                .Map( dest => dest.PassportRelationshipToPatientCode, src => src.PassportRelationshipToPatientCode)
                .Map( dest => dest.PrimaryLanguageIdentifier, src => src.PrimaryLanguage_Identifier )
                .Map( dest => dest.PrimaryLanguageIdentifier, src => src.Language)
                .Map( dest => dest.Race, src => src.Race)
                .Map( dest => dest.ReceivedGuarantorInformation, src => src.ReceivedGuarantorInformation)
                .Map( dest => dest.RelationshipToPatient, src => src.RelationshipToPatient )
                .Map( dest => dest.RelationshipToPatient, src => src.PassportRelationshipToPatientDesc)
                .Map( dest => dest.Religion, src => src.Religion)
                .Map( dest => dest.Ssn, src => src.SSN )
                .Map( dest => dest.State, src => src.State )
                .Map( dest => dest.StreetAddress1, src => src.StreetNumber )
                .Map( dest => dest.StreetAddress2, src => src.StreetName )
                .Map( dest => dest.Zip, src => src.Zip )
                .Map( dest => dest.ZipExtension, src => src.ZipExtension)
                .IgnoreNonMapped( true );

            TypeAdapterConfig<( SdocAdapter.Insurance Insurance, SdocAdapter.ESRD Root ), Models.Xpm.Insurance>.ForType()
                .Map( dest => dest.AccidentDate, src => src.Insurance.AccidentDate )
                .Map( dest => dest.AssignmentOfBenefits, src => src.Insurance.AssignmentOfBenefits )
                .Map( dest => dest.BadPlanCodeIncorrectPlanCode, src => src.Insurance.BadPlanCodeIncorrectPlanCode )
                .Map( dest => dest.BadPlanCodeMessage, src => src.Insurance.BadPlanCodeMessage )
                .Map( dest => dest.BadPlanCodeRecommendedPlanCode, src => src.Insurance.BadPlanCodeRecommendedPlanCode )
                .Map( dest => dest.BillingStatus, src => src.Insurance.BillingStatus)
                .Map( dest => dest.Branch, src => src.Insurance.Branch)
                .Map( dest => dest.BypassPayerCodeMapping, src => src.Insurance.BypassPayerCodeMapping )
                .Map( dest => dest.Calculated, src => src.Adapt<Models.Xpm.Calculated>() )
                .Map( dest => dest.CardControlNumber, src => src.Insurance.CardControlNumber )
                .Map( dest => dest.CardNumber, src => src.Insurance.CardNumber )
                .Map( dest => dest.CDProcId, src => src.Insurance.CDProcID )
                .Map( dest => dest.CDReqId, src => src.Insurance.CDReqID )
                .Map( dest => dest.CertificationBeginDate, src => src.Insurance.CertificationBeginDate )
                .Map( dest => dest.CertificationEndDate, src => src.Insurance.CertificationEndDate )
                .Map( dest => dest.CertificationExpireDate, src => src.Insurance.CertificationEndDate )
                .Map( dest => dest.ChainedBatchRecordId, src => src.Insurance.ChainedBatchRecordID )
                .Map( dest => dest.ClientCompanyId, src => src.Insurance.ClientCompanyID )
                .Map( dest => dest.ClientPayerMnemonic, src => src.Insurance.ClientPayerMnemonic )
                .Map( dest => dest.ClientPlanId, src => src.Insurance.ClientPlanID )
                .Map( dest => dest.CompanyPlanCode, src => src.Insurance.CompanyPlanCode )
                .Map( dest => dest.CoordOfBenPriority, src => src.Insurance.CoordOfBenPriority )
                .Map( dest => dest.CoordinationOfBenefits, src => src.Insurance.CoordinationOfBenefits )
                .Map( dest => dest.DLPVId, src => src.Insurance.DLPVID )
                .Map( dest => dest.DSId, src => src.Insurance.DSID )
                .Map( dest => dest.DateRun, src => src.Insurance.DateRun )
                .Map( dest => dest.DisplayWorkcenter, src => src.Insurance.DisplayWorkcenter )
                .Map( dest => dest.EffectiveDate, src => src.Insurance.EffectiveDate )
                .Map( dest => dest.FacilityNetworkIdentificationNumber, src => src.Insurance.FacilityNetworkIdentificationNumber )
                .Map( dest => dest.GenericResponseTypeDescription, src => src.Insurance.GenericResponseTypeDescription )
                .Map( dest => dest.GenericResponseTypeId, src => src.Insurance.GenericResponseTypeID )

                .Map(dest => dest.GHPInsuredRelationshipRelationshipDescription, src => src.Root.GHPInsuredRelationshipRelationshipDescription)

                .Map( dest => dest.GroupName, src => src.Insurance.GroupName )
                .Map( dest => dest.GroupNumber, src => src.Insurance.GroupName )
                .Map( dest => dest.HcfaPatientRelationshipToInsured, src => src.Insurance.HCFAPatientRelationshipToInsured )
                .Map( dest => dest.HospitalEffectiveDate, src => src.Insurance.HospitalEffectiveDate )
                .Map( dest => dest.In1SetId, src => src.Insurance.SetID )
                .Map( dest => dest.Index, src => src.Insurance.Index )
                .Map( dest => dest.InsCompanyCity, src => src.Insurance.InsuranceCompanyAddress_City )
                .Map( dest => dest.InsCompanyCity, src => src.Insurance.City)
                .Map( dest => dest.InsCompanyOtherDesignation, src => src.Insurance.InsuranceCompanyAddress_OtherDesignation )
                .Map( dest => dest.InsCompanyOtherDesignation, src => src.Insurance.Address2)
                .Map( dest => dest.InsCompanyPhoneNumber, src => src.Insurance.InsuranceCoPhoneNumber )
                .Map( dest => dest.InsCompanyState, src => src.Insurance.InsuranceCompanyAddress_State )
                .Map( dest => dest.InsCompanyState, src => src.Insurance.State)
                .Map( dest => dest.InsCompanyStreetAddress, src => src.Insurance.InsuranceCompanyAddress_StreetAddress )
                .Map( dest => dest.InsCompanyStreetAddress, src => src.Insurance.Address1)
                .Map( dest => dest.InsCompanyZip, src => src.Insurance.InsuranceCompanyAddress_Zip )
                .Map( dest => dest.InsCompanyZip, src => src.Insurance.Zip)
                .Map( dest => dest.InsuranceAuthorizationInformation, src => src.Insurance.InsuranceAuthorizationInformation )
                .Map( dest => dest.InsuranceId, src => src.Insurance.InsuranceID )
                .Map( dest => dest.CertificationNumber, src => src.Insurance.InsurancePrimaryAuthorization)
                .Map( dest => dest.InsuranceType, src => src.Insurance.InsuranceType )
                .Map( dest => dest.IsDupe, src => src.Insurance.IsDupe)
                .Map( dest => dest.IsPrimary, src => src.Insurance.IsPrimary)
                .Map( dest => dest.IsTermed, src => src.Insurance.IsTermed)
                .Map( dest => dest.MajorMedicalFlag, src => src.Insurance.MajorMedicalFlag )
                .Map( dest => dest.MajorMedicalPresentLoc, src => src.Insurance.MajorMedicalPresentLoc)
                .Map( dest => dest.MasterPolicyNumber, src => src.Insurance.MasterPolicyNumber )
                .Map( dest => dest.MedicalAssistanceBenefitPackage, src => src.Insurance.MedicalAssistanceBenefitPackage )
                .Map( dest => dest.MedicalAssistanceProgramStatus, src => src.Insurance.MedicalAssistanceProgramStatus )
                .Map( dest => dest.MedicalAssistanceResourceCode, src => src.Insurance.MedicalAssistanceResourceCode )
                .Map( dest => dest.MedicareHealthInsCardNumber, src => src.Insurance.MedicareHealthInsCardNumber )
                .Map( dest => dest.MedicareLifetimeSignatureAuthDate, src => src.Insurance.MedicareLifetimeSignatureAuthDate )
                .Map( dest => dest.MedicareLifetimeSignatureAuthLocation, src => src.Insurance.MedicareLifetimeSignatureAuthLocation)
                .Map( dest => dest.InsuranceOrdinality, src => src.Insurance.Ordinality)
                .Map( dest => dest.OverrideInsuranceAddress, src => src.Insurance.OverrideInsuranceAddress )
                .Map( dest => dest.OverrideInsuranceCity, src => src.Insurance.OverrideInsuranceCity )
                .Map( dest => dest.OverrideInsuranceName, src => src.Insurance.OverrideInsuranceName )
                .Map( dest => dest.OverrideInsuranceState, src => src.Insurance.OverrideInsuranceState )
                .Map( dest => dest.OverrideInsuranceZip, src => src.Insurance.OverrideInsuranceZip )
                .Map( dest => dest.PassportInsuranceFound, src => src.Insurance.PassportInsuranceFound )
                .Map( dest => dest.PassportPayerDescription, src => src.Insurance.PassportPayerDescription)
                .Map( dest => dest.PassportPayerMnemonic, src => src.Insurance.PassportPayerMnemonic)
                .Map( dest => dest.PassportPayerMnemonicOverride, src => src.Insurance.PassportPayerMnemonicOverride )
                .Map( dest => dest.PatientMemberIdNumber, src => src.Insurance.PatientMemberNumber_IDNumber )
                .Map( dest => dest.PatientMemberNumber, src => src.Insurance.PatientMemberNumber_IDNumber )
                .Map( dest => dest.PayerId, src => src.Insurance.InsurancePrimaryAuthorization )
                .Map( dest => dest.PlanNumber, src => src.Insurance.PlanNumber)
                .Map( dest => dest.PayerCost, src => src.Insurance.PayerCost)
                .Map( dest => dest.PayerName, src => src.Insurance.ClientPayerDescription)
                .Map( dest => dest.PlanId, src => src.Insurance.PlanIdentifier )
                .Map( dest => dest.PlanType, src => src.Insurance.InsurancePlanType )
                .Map( dest => dest.PoqFinal, src => src.Insurance.POQFinal)
                .Map( dest => dest.PPOIndicator, src => src.Insurance.PPOIndicator)
                .Map( dest => dest.PreAdmitCertPac, src => src.Insurance.PreAdmitCertPAC )
                .Map( dest => dest.PrivateRoomRate, src => src.Insurance.PrivateRoomRate )
                .Map( dest => dest.ProfeeAddress, src => src.Insurance.ProfeeAddress )
                .Map( dest => dest.ProfeeCity, src => src.Insurance.ProfeeCity )
                .Map( dest => dest.ProfeeMailTo, src => src.Insurance.ProfeeMailTo )
                .Map( dest => dest.ProfeePhoneNumber, src => src.Insurance.ProfeePhoneNumber )
                .Map( dest => dest.ProfeeState, src => src.Insurance.ProfeeState )
                .Map( dest => dest.ProfeeZip, src => src.Insurance.ProfeeZip )
                .Map( dest => dest.PropertyAndCasualtyClaimNumber, src => src.Insurance.PropertyAndCasualtyClaimNumber )
                .Map( dest => dest.RqaPayerMappingCode, src => src.Insurance.RqaPayerMappingCode)
                .Map( dest => dest.RqaPayerMappingDescription, src => src.Insurance.RqaPayerMappingDescription)
                .Map( dest => dest.RanByUserId, src => src.Insurance.RanByUserID )
                .Map( dest => dest.RanByUsername, src => src.Insurance.RanByUsername )
                .Map( dest => dest.ReAddedInsurance, src => src.Insurance.ReAddedInsurance )
                .Map( dest => dest.ReleaseInformationCode, src => src.Insurance.ReleaseInformationCode )
                .Map( dest => dest.ReportOfEligibilityFlag, src => src.Insurance.ReportofEligibilityFlag )
                .Map( dest => dest.RequestedServiceType, src => src.Insurance.RequestedServiceType )
                .Map( dest => dest.Response271, src => src.Insurance.Response271)
                .Map( dest => dest.ResponseCount, src => src.Insurance.ResponseCount)
                .Map( dest => dest.ResponseHtml, src => src.Insurance.Response_HTML)
                .Map( dest => dest.ResponseRaw, src => src.Insurance.Response_Raw )
                .Map( dest => dest.ResponseText, src => src.Insurance.Response_Text)
                .Map( dest => dest.ResponseHiDefXml, src => src.Insurance.Response_HiDefXML)
                .Map( dest => dest.RetirementDate, src => src.Insurance.RetirementDate)
                .Map( dest => dest.SemiPrivateRoomRate, src => src.Insurance.SemiPrivateRoomRate )
                .Map( dest => dest.Subscriber, src => src.Insurance.Subscriber.Adapt<Models.Xpm.Subscriber>() )
                .Map( dest => dest.SubscriberPersonMasterIndexNum, src => src.Insurance.Subscriber.SubscriberPersonMasterIndexNum )
                .Map( dest => dest.SystemOrder, src => src.Insurance.SystemOrder)
                .Map( dest => dest.TXId, src => src.Insurance.TXID )
                .Map( dest => dest.TermDate, src => src.Insurance.TermDate )
                .Map( dest => dest.InsTrackingNumber, src => src.Insurance.TrackingNumber)
                .Map( dest => dest.TriggeredIns, src => src.Insurance.TriggeredIns )
                .Map( dest => dest.TypeOfAgreementCode, src => src.Insurance.TypeOfAgreementCode )
                .Map( dest => dest.UserAdded, src => src.Insurance.UserAdded )
                .Map( dest => dest.VerificationBy, src => src.Insurance.VerificationBy )
                .Map( dest => dest.VerificationStatus, src => src.Insurance.VerificationStatus )
                .IgnoreNonMapped( true );

            TypeAdapterConfig<( SdocAdapter.Insurance Insurance, SdocAdapter.Root Root ), Models.Xpm.Calculated>.ForType()
                .Map( dest => dest.AccidentDate, src => src.Insurance.AccidentDate )
                .Map( dest => dest.AdmitURN, src => src.Root.PatientVisit.AdmitURN )
                .Map( dest => dest.CardNumber, src => src.Insurance.CardNumber )
                .Map( dest => dest.ClientPayerMnemonic, src => src.Insurance.ClientPayerMnemonic )
                .Map( dest => dest.ExperianAdded, src => src.Insurance.PassportInsuranceFound )
                .Map( dest => dest.InsuranceType, src => src.Insurance.InsuranceType )
                .Map( dest => dest.MedicalAssistanceBenefitPackage, src => src.Insurance.MedicalAssistanceBenefitPackage )
                .Map( dest => dest.MedicalAssistanceResourceCode, src => src.Insurance.MedicalAssistanceResourceCode )
                .Map( dest => dest.OverrideInsuranceAddress, src => src.Insurance.OverrideInsuranceAddress )
                .Map( dest => dest.OverrideInsuranceCity, src => src.Insurance.OverrideInsuranceCity )
                .Map( dest => dest.OverrideInsuranceName, src => src.Insurance.OverrideInsuranceName )
                .Map( dest => dest.OverrideInsuranceState, src => src.Insurance.OverrideInsuranceState )
                .Map( dest => dest.OverrideInsuranceZIP, src => src.Insurance.OverrideInsuranceZip )
                .IgnoreNonMapped( true );


            TypeAdapterConfig<(SdocAdapter.Subscriber Subscriber, SdocAdapter.Root Root), Models.Xpm.Subscriber>.ForType()
                .Map( dest => dest.Address1, src => src.Subscriber.Address1)
                .Map( dest => dest.Address2, src => src.Subscriber.Address2 )
                .Map( dest => dest.City, src => src.Subscriber.City )
                .Map( dest => dest.ClientRelationshipToPatient, src => src.Subscriber.ClientRelationshipToPatient )
                .Map( dest => dest.DateOfBirth, src => src.Subscriber.DateOfBirth )
                .Map( dest => dest.EmployeeId, src => src.Subscriber.EmployeeID )
                .Map( dest => dest.EmployerName, src => src.Subscriber.EmployerName )
                .Map( dest => dest.EmploymentStatus, src => src.Subscriber.EmploymentStatus )
                .Map( dest => dest.FirstName, src => src.Subscriber.FirstName )
                .Map( dest => dest.InsuredsPhoneNumberHome, src => src.Subscriber.SubscriberHomePhone)
                .Map( dest => dest.InsuredsEmployerPhoneNumber, src => src.Subscriber.SubscriberWorkPhone)
                .Map( dest => dest.GroupEmployerId, src => src.Subscriber.InsuredsGroupEmpID )
                .Map( dest => dest.GroupEmpName, src => src.Subscriber.InsuredsGroupEmpName )
                .Map( dest => dest.GuarantorsRelationshipToInsured, src => src.Subscriber.GuarantorsRelationshipToInsured )
                .Map( dest => dest.HicNumber, src => src.Subscriber.HICNumber )
                .Map( dest => dest.InsuredIdNumber, src => src.Subscriber.InsuredIDNumber )
                .Map( dest => dest.LastName, src => src.Subscriber.LastName )
                .Map( dest => dest.MedicareHealthInsCardNumber, src => src.Subscriber.MedicaidID )
                .Map( dest => dest.MiddleName, src => src.Subscriber.MiddleName )
                .Map( dest => dest.NameSuffix, src => src.Subscriber.NameSuffix )
                .Map( dest => dest.OrganizationName, src => src.Subscriber.InsuredsGroupEmpOrganizationName )
                .Map( dest => dest.OriginalRelationshipToPatientCode, src => src.Subscriber.OriginalRelationshipToPatientCode )
                .Map( dest => dest.Sex, src => src.Subscriber.Sex )
                .Map( dest => dest.Ssn, src => src.Subscriber.SSN )
                .Map( dest => dest.State, src => src.Subscriber.State )
                .Map( dest => dest.SubscriberId, src => src.Subscriber.SubscriberID )
                .Map( dest => dest.Zip, src => src.Subscriber.Zip )
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.PatientVisit, Models.Xpm.Diagnosis>.ForType()
                .Map( dest => dest.DiagnosisCode, src => src.DiagnosisCode1 )
                .Map( dest => dest.DiagnosisCodeAlternateText, src => src.DiagnosisCode1AlternateText )
                .Map( dest => dest.DiagnosisCodingMethod, src => src.DiagnosisCodeMethod)
                .Map( dest => dest.DiagnosisDescription, src => src.DiagnosisDescription )
                .Map( dest => dest.DiagnosisType, src => src.DiagnosisType )
                .Map( dest => dest.MajorDiagnosticCategory, src => src.MajorDiagnosticCategory )
                .IgnoreNonMapped( true );

            TypeAdapterConfig<SdocAdapter.NextOfKin, Models.Xpm.NextOfKin>.ForType()
                .Map( dest => dest.BusinessPhoneNumber, src => src.BusinessPhoneNumber_PhoneNumber )
                .Map( dest => dest.BusinessPhoneNumberString, src => src.BusinessPhoneNumber_PhoneNumberString )
                .Map( dest => dest.City, src => src.Address_City )
                .Map( dest => dest.ContactRoleIdentifier, src => src.ContactRole_Identifier )
                .Map( dest => dest.ContactRoleText, src => src.ContactRole_Text )
                .Map( dest => dest.FamilyName, src => src.Name_FamilyName )
                .Map( dest => dest.FirstName, src => src.Name_GivenName)
                .Map( dest => dest.GivenName, src => src.Name_GivenName )
                .Map( dest => dest.HomePhoneNumber, src => src.PhoneNumber_PhoneNumber )
                .Map( dest => dest.HomePhoneNumberString, src => src.PhoneNumber_PhoneNumberString )
                .Map( dest => dest.NextOfKinID, src => src.NextOfKinID)
                .Map( dest => dest.LastName, src => src.Name_FamilyName)
                .Map( dest => dest.OtherDesignation, src => src.Address_OtherDesignation )
                .Map( dest => dest.Ordinality, src => src.Ordinality)
                .Map( dest => dest.RelationshipIdentifier, src => src.Relationship_Identifier )
                .Map( dest => dest.RelationshipText, src => src.Relationship_Text )
                .Map( dest => dest.SetId, src => src.SetID )
                .Map( dest => dest.State, src => src.Address_State )
                .Map( dest => dest.StreetAddress, src => src.Address_StreetAddress )
                .Map( dest => dest.Zip, src => src.Address_Zip )
                .IgnoreNonMapped( true );
        }
    }
}