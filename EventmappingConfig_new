using EH.Models.Xpm;
using Mapster;

namespace EH.Shared.SdocJsonToXpmConverter.Mapping.Configs
{
    public class SdocToXpmMappingConfig : IRegister
    {
        public void Register(TypeAdapterConfig config)
        {
            // Mapeo inverso de Sdoc a XPM
            TypeAdapterConfig<Sdoc, Event>.ForType()
                .Map(dest => dest.Alerts.AlertCategory, src => src.AlertAlertCategory)
                .Map(dest => dest.Alerts.AlertCode, src => src.AlertAlertCode)
                .Map(dest => dest.Alerts.AlertDescription, src => src.AlertAlertDescription)
                .Map(dest => dest.Alerts.AlertResolved, src => src.AlertAlertResolved)
                .Map(dest => dest.Alerts.AlertSource, src => src.AlertAlertSource)
                .Map(dest => dest.Alerts.AlertStatus, src => src.AlertAlertStatus)
                .Map(dest => dest.Alerts.CompanyID, src => src.AlertCompanyId)
                .Map(dest => dest.Alerts.DateUpdated, src => src.AlertDateUpdated)
                .Map(dest => dest.Alerts.Care_Patient_Account_Alerts_ID, src => src.AlertECarePatientAccountAlertsId)
                .Map(dest => dest.Alerts.EVN_UserID, src => src.AlertEVNUserId)
                .Map(dest => dest.Alerts.NeboUserID, src => src.AlertNeboUserId)
                .Map(dest => dest.Alerts.ProductSource, src => src.AlertProductSource)
                .Map(dest => dest.Alerts.Protocol, src => src.AlertProtocol)
                .Map(dest => dest.MessageEvent.BatchRowId, src => src.BatchRowId)
                .Map(dest => dest.MessageHeader.Deserializer, src => src.Deserializer)
                .Map(dest => dest.MessageEvent.DoNotOverWriteInsurance, src => src.DoNotOverWriteInsurance)
                .Map(dest => dest.MessageEvent.EventReasonCode, src => src.EventReasonCode)
                .Map(dest => dest.MessageEvent.IPS_Message_ID, src => src.IpsMessageId)
                .Map(dest => dest.MessageEvent.IsBatchTrigger, src => src.IsBatchTrigger)
                .Map(dest => dest.MessageEvent.IsTempAccount, src => src.IsTempAccount)
                .Map(dest => dest.MessageEvent.MessageEventVersion, src => src.MessageEventVersion)
                .Map(dest => dest.MSP.Payload, src => src.Payload)
                .Map(dest => dest.MessageEvent.PopPic, src => src.PopPic)
                .Map(dest => dest.MessageEvent.ScanAndTriggerId, src => src.ScanAndTriggerId)
                .Map(dest => dest.MessageEvent.SequenceID, src => src.SequenceId)
                .Map(dest => dest.MessageEvent.TestMode, src => src.TestMode)
                .Map(dest => dest.Authentication.UserMnemonic, src => src.OperatorId)
                .Map(dest => dest.MessageEvent.OrcaInstID, src => src.OrcaInstId)
                .Map(dest => dest.MessageEvent.OriginalTriggeredUser, src => src.OriginalTriggeredUser)
                .Map(dest => dest.MessageHeader.OverRideResponseReuse, src => src.OverRideResponseReuse)
                .Map(dest => dest.Authentication.TradingPartnerID, src => src.TpIdentifier)
                .Map(dest => dest.MessageEvent.UpdateIPS_TempAccount, src => src.UpdateIPSTempAccount)
                .Map(dest => dest.MessageEvent.UseForHL7PostbackTemplateOnly, src => src.UseForHL7PostbackTemplateOnly)
                .Map(dest => dest.MessageHeader.ValidHL7PostbackTemplate, src => src.ValidHL7PostbackTemplate)
                .Map(dest => dest.WrapperMetadata, src => src.WrapperMetadata)
                .IgnoreNonMapped(true);
        }
    }
}
using EH.Models.Xpm;
using Mapster;

namespace EH.Shared.SdocJsonToXpmConverter.Mapping.Configs
{
    public class MessageEventMappingConfig : IRegister
    {
        public void Register(TypeAdapterConfig config)
        {
            // Mapeo inverso de SdocAdapter.MessageEvent a Event
            TypeAdapterConfig<SdocAdapter.MessageEvent, Event>.ForType()
                .Map(dest => dest.AlertECarePatientAccountAlertsId, src => src.eCare_Patient_Account_Alerts_ID)
                .Map(dest => dest.BatchBinNumber, src => src.BatchBinNumber)
                .Map(dest => dest.BatchFileName, src => src.BatchFileName)
                .Map(dest => dest.BatchRowId, src => src.BatchRowId)
                .Map(dest => dest.BypassAccountFinder, src => src.BypassAccountFinder)
                .Map(dest => dest.CancellationMessageType, src => src.CancellationMessageType)
                .Map(dest => dest.ClientRequestedEventIndicator, src => src.ClientRequestedEventIndicator)
                .Map(dest => dest.ConcatenateAISActionCodes, src => src.ConcatenateAISActionCodes)
                .Map(dest => dest.ConcatenateAssignedLocation, src => src.ConcatenateAssignedLocation)
                .Map(dest => dest.ConcatenateProcedureCodes, src => src.ConcatenateProcedureCodes)
                .Map(dest => dest.CreateDate, src => src.CreateDate)
                .Map(dest => dest.Deserializer, src => src.Deserializer)
                .Map(dest => dest.DoNotOverWriteInsurance, src => src.DoNotOverWriteInsurance)
                .Map(dest => dest.DoNotStoreHL7PostbackTemplate, src => src.DoNotStoreHL7PostbackTemplate)
                .Map(dest => dest.DoNotWriteToWC, src => src.DoNotWriteToWC)
                .Map(dest => dest.EventReasonCode, src => src.EventReasonCode)
                .Map(dest => dest.FAS_SetSearchType_ByAdditionalSettings, src => src.FASSetSearchTypeByAdditionalSettings)
                .Map(dest => dest.ForceAutoRun, src => src.ForceAutoRun)
                .Map(dest => dest.ForceAutoRunAuth, src => src.ForceAutoRunAuth)
                .Map(dest => dest.ForceAutoRunAV, src => src.ForceAutoRunAV)
                .Map(dest => dest.ForceAutoRunEV, src => src.ForceAutoRunEV)
                .Map(dest => dest.ForceAutoRunMedNec, src => src.ForceAutoRunMedNec)
                .Map(dest => dest.ForceAutoRunPayNav, src => src.ForceAutoRunPayNav)
                .Map(dest => dest.FoundCoverageDiscovery, src => src.FoundCoverageDiscovery)
                .Map(dest => dest.HasSnTInsertedEver, src => src.HasSnTInsertedEver)
                .Map(dest => dest.HasSnTTriggeredEver, src => src.HasSnTTriggeredEver)
                .Map(dest => dest.InsertBatchRecordError, src => src.InsertBatchRecordError)
                .Map(dest => dest.IPSMessageType, src => src.IPSMessageType)
                .Map(dest => dest.IsBatchTrigger, src => src.IsBatchTrigger)
                .Map(dest => dest.IsCDB2IRequest, src => src.IsCDB2IRequest)
                .Map(dest => dest.JoinOnInsuranceMnemonicOnly, src => src.JoinOnInsuranceMnemonicOnly)
                .Map(dest => dest.MessageInputType, src => src.MessageInputType)
                .Map(dest => dest.MPIUpdateInsurancesOnly, src => src.MPIUpdateInsurancesOnly)
                .Map(dest => dest.MPIWriteAccountInsurance, src => src.MPIWriteAccountInsurance)
                .Map(dest => dest.NextBarDisplayResetMsg, src => src.NextBarDisplayResetMsg)
                .Map(dest => dest.OnDemandCDRequest, src => src.OnDemandCDRequest)
                .Map(dest => dest.OnDemandFASRequest, src => src.OnDemandFASRequest)
                .Map(dest => dest.PersonType, src => src.PersonType)
                .Map(dest => dest.AddressToValidate, src => src.PopPic)
                .Map(dest => dest.PopPic, src => src.PopPic)
                .Map(dest => dest.RemoveProcedureCodes, src => src.RemoveProcedureCodes)
                .Map(dest => dest.ResponseChainingOn, src => src.ResponseChainingOn)
                .Map(dest => dest.ResponseQueue, src => src.ResponseQueue)
                .Map(dest => dest.RO_MessageType, src => src.ROMessageType)
                .Map(dest => dest.SDocBaseMessageSpecification, src => src.SDocBaseMessageSpecification)
                .Map(dest => dest.SequenceID, src => src.SequenceId)
                .Map(dest => dest.SkipAllIRules, src => src.SkipAllIRules)
                .Map(dest => dest.SocanovaSendTime, src => src.SocanovaSendTime)
                .Map(dest => dest.SourceInterface, src => src.SourceInterface)
                .Map(dest => dest.StrainCorrelationId, src => src.StrainCorrelationId)
                .Map(dest => dest.SubmitterIdentificationNumber, src => src.SubmitterIdentificationNumber)
                .Map(dest => dest.TestMode, src => src.TestMode)
                .Map(dest => dest.UseForHL7PostbackTemplateOnly, src => src.UseForHL7PostbackTemplateOnly)
                .Map(dest => dest.UserTriggered, src => src.UserTriggered)
                .Map(dest => dest.UseSelectedServiceType, src => src.UseSelectedServiceType)
                .Map(dest => dest.ValidHL7PostbackTemplate, src => src.ValidHL7PostbackTemplate)
                .IgnoreNonMapped(true);
        }
    }
}
