using EH.Models.Xpm;
using Mapster;

namespace EH.Shared.SdocJsonToXpmConverter.Mapping.Configs
{
    public class EventMappingConfig : IRegister
    {
        public void Register( TypeAdapterConfig config )
        {
TypeAdapterConfig<Event, SdocAdapter.Root>.ForType()
    .Map(dest => dest.Alerts.AlertCategory, src => src.AlertAlertCategory)
    .Map(dest => dest.Alerts.AlertCode, src => src.AlertAlertCode)
    .Map(dest => dest.Alerts.AlertDescription, src => src.AlertAlertDescription)
    .Map(dest => dest.Alerts.AlertResolved, src => src.AlertAlertResolved)
    .Map(dest => dest.Alerts.AlertSource, src => src.AlertAlertSource)
    .Map(dest => dest.Alerts.AlertStatus, src => src.AlertAlertStatus)
    .Map(dest => dest.Alerts.CompanyID, src => src.AlertCompanyId)
    .Map(dest => dest.Alerts.DateUpdated, src => src.AlertDateUpdated)
    .Map(dest => dest.Alerts.Care_Patient_Account_Alerts_ID, src => src.AlertECarePatientAccountAlertsId)
    .Map(dest => dest.Alerts.EVN_UserID, src => src.AlertEVNUserId)
    .Map(dest => dest.Alerts.NeboUserID, src => src.AlertNeboUserId)
    .Map(dest => dest.Alerts.ProductSource, src => src.AlertProductSource)
    .Map(dest => dest.Alerts.Protocol, src => src.AlertProtocol)
    .Map(dest => dest.MessageEvent.BatchRowId, src => src.BatchRowId)
    .Map(dest => dest.MessageHeader.Deserializer, src => src.Deserializer)
    .Map(dest => dest.MessageEvent.DoNotOverWriteInsurance, src => src.DoNotOverWriteInsurance)
    .Map(dest => dest.MessageEvent.EventReasonCode, src => src.EventReasonCode)
    .Map(dest => dest.MessageEvent.IPS_Message_ID, src => src.IpsMessageId)
    .Map(dest => dest.MessageEvent.IsBatchTrigger, src => src.IsBatchTrigger)
    .Map(dest => dest.MessageEvent.IsTempAccount, src => src.IsTempAccount)
    .Map(dest => dest.MessageEvent.MessageEventVersion, src => src.MessageEventVersion)
    .Map(dest => dest.Adapt<MessageHeader>(), src => src.MessageHeader)
    .Map(dest => dest.MessageEvent.MPIWriteAccountInsurance, src => src.MPIWriteAccountInsurance)
    .Map(dest => dest.Authentication.UserMnemonic, src => src.OperatorId)
    .Map(dest => dest.MessageEvent.OrcaInstID, src => src.OrcaInstId)
    .Map(dest => dest.MessageEvent.OriginalTriggeredUser, src => src.OriginalTriggeredUser)
    .Map(dest => dest.MessageHeader.OverRideResponseReuse, src => src.OverRideResponseReuse)
    .Map(dest => dest.MSP.Payload, src => src.Payload)
    .Map(dest => dest.MessageEvent.PopPic, src => src.PopPic)
    .Map(dest => dest.MessageEvent.ScanAndTriggerId, src => src.ScanAndTriggerId)
    .Map(dest => dest.MessageEvent.SequenceID, src => src.SequenceId)
    .IgnoreNonMapped(true);

TypeAdapterConfig<Event, SdocAdapter.MessageEvent>.ForType()
    .Map(dest => dest.eCare_Patient_Account_Alerts_ID, src => src.AlertECarePatientAccountAlertsId)
    .Map(dest => dest.BatchBinNumber, src => src.BatchBinNumber)
    .Map(dest => dest.BatchFileName, src => src.BatchFileName)
    .Map(dest => dest.BatchRowId, src => src.BatchRowId)
    .Map(dest => dest.BypassAccountFinder, src => src.BypassAccountFinder)
    .Map(dest => dest.CancellationMessageType, src => src.CancellationMessageType)
    .Map(dest => dest.ClientRequestedEventIndicator, src => src.ClientRequestedEventIndicator)
    .Map(dest => dest.ConcatenateAISActionCodes, src => src.ConcatenateAISActionCodes)
    .Map(dest => dest.ConcatenateAssignedLocation, src => src.ConcatenateAssignedLocation)
    .Map(dest => dest.ConcatenateProcedureCodes, src => src.ConcatenateProcedureCodes)
    .Map(dest => dest.CreateDate, src => src.CreateDate)
    .Map(dest => dest.DeactivateCDInsurances, src => src.DeactivateCDInsurances)
    .Map(dest => dest.Deserializer, src => src.Deserializer)
    .Map(dest => dest.DoNotOverWriteInsurance, src => src.DoNotOverWriteInsurance)
    .Map(dest => dest.DoNotStoreHL7PostbackTemplate, src => src.DoNotStoreHL7PostbackTemplate)
    .Map(dest => dest.DoNotWriteToWC, src => src.DoNotWriteToWC)
    .Map(dest => dest.EventReasonCode, src => src.EventReasonCode)
    .Map(dest => dest.FAS_SetSearchType_ByAdditionalSettings, src => src.FASSetSearchTypeByAdditionalSettings)
    .Map(dest => dest.ForceAutoRun, src => src.ForceAutoRun)
    .Map(dest => dest.ForceAutoRunAuth, src => src.ForceAutoRunAuth)
    .Map(dest => dest.ForceAutoRunAV, src => src.ForceAutoRunAV)
    .Map(dest => dest.ForceAutoRunEV, src => src.ForceAutoRunEV)
    .Map(dest => dest.ForceAutoRunMedNec, src => src.ForceAutoRunMedNec)
    .Map(dest => dest.ForceAutoRunPayNav, src => src.ForceAutoRunPayNav)
    .Map(dest => dest.FoundCoverageDiscovery, src => src.FoundCoverageDiscovery)
    .Map(dest => dest.HasSnTInsertedEver, src => src.HasSnTInsertedEver)
    .Map(dest => dest.HasSnTTriggeredEver, src => src.HasSnTTriggeredEver)
    .Map(dest => dest.InsertBatchRecordError, src => src.InsertBatchRecordError)
    .Map(dest => dest.IPSMessageType, src => src.IPSMessageType)
    .Map(dest => dest.IsBatchTrigger, src => src.IsBatchTrigger)
    .Map(dest => dest.IsCDB2IRequest, src => src.IsCDB2IRequest)
    .Map(dest => dest.JoinOnInsuranceMnemonicOnly, src => src.JoinOnInsuranceMnemonicOnly)
    .Map(dest => dest.MessageInputType, src => src.MessageInputType)
    .Map(dest => dest.MPIUpdateInsurancesOnly, src => src.MPIUpdateInsurancesOnly)
    .Map(dest => dest.MPIWriteAccountInsurance, src => src.MPIWriteAccountInsurance)
    .Map(dest => dest.NextBarDisplayResetMsg, src => src.NextBarDisplayResetMsg)
    .Map(dest => dest.OnDemandCDRequest, src => src.OnDemandCDRequest)
    .Map(dest => dest.OnDemandFASRequest, src => src.OnDemandFASRequest)
    .Map(dest => dest.PersonType, src => src.PersonType)
    .Map(dest => dest.AddressToValidate, src => src.PopPic)
    .Map(dest => dest.PopPic, src => src.PopPic)
    .Map(dest => dest.RemoveProcedureCodes, src => src.RemoveProcedureCodes)
    .Map(dest => dest.ResponseChainingOn, src => src.ResponseChainingOn)
    .Map(dest => dest.ResponseQueue, src => src.ResponseQueue)
    .Map(dest => dest.RO_MessageType, src => src.ROMessageType)
    .Map(dest => dest.SDocBaseMessageSpecification, src => src.SDocBaseMessageSpecification)
    .Map(dest => dest.SequenceID, src => src.SequenceId)
    .Map(dest => dest.SkipAllIRules, src => src.SkipAllIRules)
    .Map(dest => dest.SocanovaSendTime, src => src.SocanovaSendTime)
    .Map(dest => dest.SourceInterface, src => src.SourceInterface)
    .Map(dest => dest.StrainCorrelationId, src => src.StrainCorrelationId)
    .Map(dest => dest.SubmitterIdentificationNumber, src => src.SubmitterIdentificationNumber)
    .Map(dest => dest.TestMode, src => src.TestMode)
    .Map(dest => dest.UseForHL7PostbackTemplateOnly, src => src.UseForHL7PostbackTemplateOnly)
    .Map(dest => dest.UserTriggered, src => src.UserTriggered)
    .Map(dest => dest.UseSelectedServiceType, src => src.UseSelectedServiceType)
    .Map(dest => dest.ValidHL7PostbackTemplate, src => src.ValidHL7PostbackTemplate)
    .IgnoreNonMapped(true);


TypeAdapterConfig<Event, SdocAdapter.MessageHeader>.ForType()
    .Map(dest => dest.AdminTxGuid, src => src.AdminTxGuid)
    .Map(dest => dest.AllowDemoSearch_ClientMasterPatientID, src => src.AllowDemoSearchClientMasterPatientId)
    .Map(dest => dest.AllowNewRequests, src => src.AllowNewRequests)
    .Map(dest => dest.SDocBaseMessageType, src => src.BaseMessageType)
    .Map(dest => dest.BatchTxGUID, src => src.BatchTxGuid)
    .Map(dest => dest.ClientAdminTimeZone, src => src.ClientAdminTimeZone)
    .Map(dest => dest.ClientMnemonic, src => src.ClientMnemonic)
    .Map(dest => dest.ClientNPI, src => src.ClientNpi)
    .Map(dest => dest.ClientRequestedEventIndicator, src => src.ClientRequestedEventIndicator)
    .Map(dest => dest.ClientSpecificClientID, src => src.ClientSpecifiedClientId)
    .Map(dest => dest.ConfigClientId, src => src.ConfigClientId)
    .Map(dest => dest.ConfigTradingPartner, src => src.ConfigTradingPartner)
    .Map(dest => dest.ConfigUserId, src => src.ConfigUserId)
    .Map(dest => dest.CorrelationID_278, src => src.CorrelationId278)
    .Map(dest => dest.CountryCode, src => src.CountryCode)
    .Map(dest => dest.DateOfMessageProcessed, src => src.DateOfMessageProcessed)
    .Map(dest => dest.DateOfMessage, src => src.DateTimeOfEvent)
    .Map(dest => dest.DateTimeOfEvent, src => src.DateTimeOfEvent)
    .Map(dest => dest.EncounterStateId, src => src.EncounterStateId)
    .Map(dest => dest.ExperianClientId, src => src.ExperianClientId)
    .Map(dest => dest.ExperianUserId, src => src.ExperianUserId)
    .Map(dest => dest.ExpirationDate, src => src.ExpirationDate)
    .Map(dest => dest.HIS_UserID, src => src.HisUserId)
    .Map(dest => dest.IntelliAvResponse_NextPayerCode, src => src.IntelliAvResponse_NextPayerCode)
    .Map(dest => dest.ISAInterchangeControlNumber, src => src.IsaInterchangeControlNumber)
    .Map(dest => dest.Is_IPS_Message, src => src.IsIpsMessage)
    .Map(dest => dest.Q22_IsPaymentAdvisor, src => src.IsQ22PaymentAdvisor)
    .Map(dest => dest.IsVendorRequest, src => src.IsVendorRequest)
    .Map(dest => dest.LoadFromMPI_IncludeState, src => src.LoadFromMpiIncludeState)
    .Map(dest => dest.MessageControlID, src => src.MessageControlId)
    .Map(dest => dest.CorrelationID, src => src.MessageCorrelationId)
    .Map(dest => dest.MessageDelaySeconds, src => src.MessageDelaySeconds)
    .Map(dest => dest.MessageEventFormat, src => src.MessageEventFormat)
    .Map(dest => dest.MessageEventType, src => src.MessageEventType)
    .Map(dest => dest.MessageQueryName, src => src.MessageQueryName)
    .Map(dest => dest.MessageWrapped, src => src.MessageWrapped)
    .Map(dest => dest.MsmqResponseQueue, src => src.MsmqResponseQueue)
    .Map(dest => dest.ResponseQueue, src => src.MsmqResponseQueue)
    .Map(dest => dest.MultiTransactionMode, src => src.MultiTransactionMode)
    .Map(dest => dest.NeboAccountID, src => src.NeboAccountId)
    .Map(dest => dest.NewEligibilityEvent, src => src.NewEligibilityEvent)
    .Map(dest => dest.OrcaInstanceId, src => src.OrcaInstanceId)
    .Map(dest => dest.PassportDepartment, src => src.PassportDepartment, src => !string.IsNullOrWhiteSpace(src.PassportDepartment))
    .Map(dest => dest.PassportDepartment, src => src.Department, src => string.IsNullOrWhiteSpace(src.PassportDepartment))
    .Map(dest => dest.PlatformFlag, src => src.PlatformFlag)
    .Map(dest => dest.PpaeInstanceId, src => src.PpaeInstanceId)
    .Map(dest => dest.PrincipalLanguageOfMessage, src => src.PrincipalLanguageOfMessage)
    .Map(dest => dest.ProcessingId, src => src.ProcessingId)
    .Map(dest => dest.Q22_CorrelationID, src => src.Q22CorrelationId)
    .Map(dest => dest.ReasonforRouting, src => src.ReasonforRouting)
    .Map(dest => dest.ReceivingFacility, src => src.ReceivingFacility)
    .Map(dest => dest.StateID, src => src.StateId)
    .Map(dest => dest.SubmittedMessageType, src => src.SubmittedMessageType)
    .Map(dest => dest.SystemID, src => src.SystemId)
    .Map(dest => dest.SystemName, src => src.SystemName)
    .Map(dest => dest.TraceNumber, src => src.TraceNumber)
    .Map(dest => dest.TransactionCount, src => src.TransactionCount)
    .Map(dest => dest.TransactionID, src => src.TransactionId)
    .Map(dest => dest.OriginalTriggeredUser, src => src.TriggeredUser)
    .Map(dest => dest.TriggeredUserOverride, src => src.TriggeredUserOverride)
    .Map(dest => dest.UseClearingHouseBatchThrottle, src => src.UseClearingHouseBatchThrottle)
    .Map(dest => dest.UserMnemonic, src => src.UserMnemonic)
    .Map(dest => dest.UserTriggered, src => src.UserTriggered)
    .Map(dest => dest.UseSelectedServiceType, src => src.UseSelectedServiceType)
    .Map(dest => dest.VendorDataSource, src => src.VendorDataSource)
    .Map(dest => dest.VendorId, src => src.VendorId)
    .Map(dest => dest.VendorRequestedOverride, src => src.VendorRequestedOverride)
    .Map(dest => dest.VendorRequestID, src => src.VendorRequestID)
    .IgnoreNonMapped(true);
  }
  }
 }
