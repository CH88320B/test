{                                                                                          
      "SDoc_Root": { 
	  "PatientVisit": {
	            "PatientEncounterID": null,
                "PatientClass": "O",
                "AssignedLocation": "UPW",
                "RoomType": null,
                "BedType": null,
                "PatientFacility": "",
                "LocationStatus": null,
                "ComprehensiveLocationIdentifier": null,
                "AdmissionType": "EL",
                "PreadmitNumber": null
		    }
	}	}		
		


using Mapster;

public class MapperExample
{
    public SdocRoot MapXpmToSdoc(XpmEncounter xpmEncounter)
    {
        var config = new TypeAdapterConfig();

        config.ForType<XpmPatientVisit, PatientVisit>()
            .MapToConstructor(dest => dest.ComprehensiveLocationIdentifier,
                              src => src.Cal_ComprehensiveLocationIdentifier);

        config.ForType<XpmEncounter, SdocRoot>()
            .MapToConstructor(dest => dest.PatientVisit,
                              src => src.Encounters?[0]?.PatientVisit);

        var sdocRoot = xpmEncounter?.Adapt<SdocRoot>(config);

        return sdocRoot;
    }
}



    public APIGatewayProxyResponse FunctionHandler(APIGatewayProxyRequest request, ILambdaContext context)
    {
        var XpmJson = request.Body;
        var serializedJsonSdoc= string.Empty;

        LambdaLogger.Log($"Beginning - XpmToJsonSdoc Mapper");

        //var JsonDoc = RootMapper.Map(XpmJson);
 
        var intermidieclass = JsonConvert.DeserializeObject<XpmRoot>(XpmJson);
        var rootClass = intermidieclass.Adapt<XpmRoot>();

        Console.WriteLine(XpmJson);
        Console.WriteLine(rootClass.Encounter.Length);

        // Acceder a los datos mapeados
        if (rootClass != null && rootClass.Encounter != null && rootClass.Encounter.Length > 0)
        {
            var encounter = rootClass.Encounter[0];
            Console.WriteLine($"EncounterID: {encounter.EncounterID}");
            Console.WriteLine($"AssignedLocation: {encounter.XpmPatientVisit.AssignedLocation}");
            // Acceder a otras propiedades y listas...
        }
        else
        {
            Console.WriteLine("Error en el mapeo del JSON.");
        }

        //serializedJsonSdoc = JsonConvert.SerializeObject(JsonDoc);
        LambdaLogger.Log( $"Complete - XpmToJsonSdoc Mapper" );

        return new APIGatewayProxyResponse
        {
            StatusCode = ( int )HttpStatusCode.OK,
            Body = serializedJsonSdoc,
            Headers = new Dictionary<string, string>
            {
                { "Content-Type", "application/json" },
                { "Access-Control-Allow-Origin", "*" }
            }
        };
    }
}
