      public APIGatewayProxyResponse FunctionHandler(APIGatewayProxyRequest request, ILambdaContext context)
    {
        var sdocxpm = request.Body;
        var ooheabders = request.Headers;
        var ContentType = string.Empty;
        var serializedXpm = string.Empty;
        bool isEncounter;
        bool isSDoc_Root;

        if (Is_JSON(sdocxpm))
        {

             var json = JObject.Parse(sdocxpm);
             isEncounter = json.ContainsKey("Encounter");
             isSDoc_Root = json.ContainsKey("SDoc_Root");
        }

        LambdaLogger.Log($"is - before");

        if (isSDoc_Root)
        {
            bool IsdocJson = Is_JSON(sdocxpm);
            bool IsdocXml = Is_XML(sdocxpm);
            if (Is_JSON(sdocxpm))
            {

                Console.WriteLine("IS Json");
            }
            else if (Is_XML(sdocxpm))
            {
                Console.WriteLine("IS XML");
            }

            if (request.Headers != null && request.Headers.ContainsKey("Content-Type"))
            {
                string ContenType = request.Headers["Content-Type"];

                LambdaLogger.Log($"is - Test");

                if (ContenType.Contains("application/json"))
                {
                    LambdaLogger.Log($"is - SDocJsonToXpm Mapper");
                }

            }



           

            if (IsdocJson == true)
            {
                ContentType = "application/json";
            }
            else
            {
                ContentType = "application/xml";
            }

            LambdaLogger.Log($"Beginning - SDocJsonToXpm Mapper");
            // LambdaLogger.Log(request.Headers["Content-Type"]);

            var xpm = RootMapper.Map(sdocxpm, ContentType);

            serializedXpm = JsonConvert.SerializeObject(xpm);
        }
        else if(isEncounter)
            {
            LambdaLogger.Log($"Beginning - Encounter Mapper");

            var intermidieclass = JsonConvert.DeserializeObject<XpmRoot>(sdocxpm);
            var rootClass = intermidieclass.Adapt<XpmRoot>();

             var fisrtencounter = rootClass.Encounter[0];
            var mapperSdoc = new SdocMappingConfig();
            var sdoRoot = mapperSdoc.MapXpmtoSdoc(fisrtencounter);
            serializedXpm = JsonConvert.SerializeObject(sdoRoot);
        }
        LambdaLogger.Log( $"Complete - SDocJsonToXpm Mapper" );

        static bool Is_JSON(string sdocxpm)
        {
            try
            {
                Newtonsoft.Json.JsonConvert.DeserializeObject(sdocxpm);
                return true;
            }
            catch (Newtonsoft.Json.JsonReaderException)
            {
                return false;
            }

        }

        static bool Is_XML(string sdocxpm)
        {
            try
            {
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(sdocxpm);

                return true;
            }
            catch (XmlException)
            {
                return false;
            }

        }

        return new APIGatewayProxyResponse
        {
            StatusCode = ( int )HttpStatusCode.OK,
            Body = serializedXpm,
            Headers = new Dictionary<string, string>
            {
                { "Content-Type", "application/json" },
                { "Access-Control-Allow-Origin", "*" }
            }
        };
    }
}
